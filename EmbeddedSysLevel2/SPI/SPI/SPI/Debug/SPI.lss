
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007be  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a0  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f3  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000759  00000000  00000000  00002977  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "DIO_Interface.h"
#include "SPI_int.h"
#include "SER_SPI_int.h"
int main(void)
{
	SER_SPIvoidInitPinMaster();
  6c:	0e 94 ca 00 	call	0x194	; 0x194 <SER_SPIvoidInitPinMaster>
	
    SPI_ENMasterInit();
  70:	0e 94 bc 00 	call	0x178	; 0x178 <SPI_ENMasterInit>
	
	SPI_u8SendReceive('a');
  74:	81 e6       	ldi	r24, 0x61	; 97
  76:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_u8SendReceive>
  7a:	ff cf       	rjmp	.-2      	; 0x7a <main+0xe>

0000007c <DIO_voidSetPinDirection>:
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;

    if (EN_Direction == INPUT)
  7c:	41 11       	cpse	r20, r1
  7e:	3c c0       	rjmp	.+120    	; 0xf8 <DIO_voidSetPinDirection+0x7c>
    {
        switch (EN_port)
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	99 f0       	breq	.+38     	; 0xaa <DIO_voidSetPinDirection+0x2e>
  84:	28 f0       	brcs	.+10     	; 0x90 <DIO_voidSetPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	e9 f0       	breq	.+58     	; 0xc4 <DIO_voidSetPinDirection+0x48>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	41 f1       	breq	.+80     	; 0xde <DIO_voidSetPinDirection+0x62>
  8e:	6e c0       	rjmp	.+220    	; 0x16c <DIO_voidSetPinDirection+0xf0>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
  90:	2a b3       	in	r18, 0x1a	; 26
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <DIO_voidSetPinDirection+0x20>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <DIO_voidSetPinDirection+0x1c>
  a0:	80 95       	com	r24
  a2:	82 23       	and	r24, r18
  a4:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
  a6:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
  a8:	08 95       	ret
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
  aa:	27 b3       	in	r18, 0x17	; 23
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_voidSetPinDirection+0x3a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_voidSetPinDirection+0x36>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
  c0:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
  c2:	08 95       	ret
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
  c4:	24 b3       	in	r18, 0x14	; 20
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_voidSetPinDirection+0x54>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_voidSetPinDirection+0x50>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
  da:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
  dc:	08 95       	ret
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinDirection+0x6e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinDirection+0x6a>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
  f4:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
  f6:	08 95       	ret
        default:
            state = E_ERROR;
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	d1 f5       	brne	.+116    	; 0x170 <DIO_voidSetPinDirection+0xf4>
    {
        switch (EN_port)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 f0       	breq	.+36     	; 0x124 <DIO_voidSetPinDirection+0xa8>
 100:	28 f0       	brcs	.+10     	; 0x10c <DIO_voidSetPinDirection+0x90>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	d9 f0       	breq	.+54     	; 0x13c <DIO_voidSetPinDirection+0xc0>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	29 f1       	breq	.+74     	; 0x154 <DIO_voidSetPinDirection+0xd8>
 10a:	34 c0       	rjmp	.+104    	; 0x174 <DIO_voidSetPinDirection+0xf8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_voidSetPinDirection+0x9c>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_voidSetPinDirection+0x98>
 11c:	82 2b       	or	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
 120:	84 e0       	ldi	r24, 0x04	; 4
    {
        switch (EN_port)
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
 122:	08 95       	ret
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_voidSetPinDirection+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_voidSetPinDirection+0xb0>
 134:	82 2b       	or	r24, r18
 136:	87 bb       	out	0x17, r24	; 23
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
 138:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
 13a:	08 95       	ret
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 13c:	24 b3       	in	r18, 0x14	; 20
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinDirection+0xcc>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinDirection+0xc8>
 14c:	82 2b       	or	r24, r18
 14e:	84 bb       	out	0x14, r24	; 20
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
 150:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
 152:	08 95       	ret
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinDirection+0xe4>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinDirection+0xe0>
 164:	82 2b       	or	r24, r18
 166:	81 bb       	out	0x11, r24	; 17
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
 168:	84 e0       	ldi	r24, 0x04	; 4
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
 16a:	08 95       	ret
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_ERROR;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	08 95       	ret
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    EN_ERRORSTATE_t state;
    state = E_ERROR;
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	08 95       	ret
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
            break;
        default:
            state = E_ERROR;
 174:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return state;
} /* DIO_voidSetPinDirection */
 176:	08 95       	ret

00000178 <SPI_ENMasterInit>:
    /* Slave Select */
   CLRBIT(SPCR, MSTR);

    /* SPI Enable */
    SETBIT(SPCR, SPE);
}
 178:	6c 9a       	sbi	0x0d, 4	; 13
 17a:	6b 98       	cbi	0x0d, 3	; 13
 17c:	6a 98       	cbi	0x0d, 2	; 13
 17e:	70 98       	cbi	0x0e, 0	; 14
 180:	68 98       	cbi	0x0d, 0	; 13
 182:	69 98       	cbi	0x0d, 1	; 13
 184:	6e 9a       	sbi	0x0d, 6	; 13
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret

0000018a <SPI_u8SendReceive>:
 * @param Data Send char
 * @return uint8_t Receive char
 */
uint8_t SPI_u8SendReceive(uint8_t Data)
{
    SPDR = Data;
 18a:	8f b9       	out	0x0f, r24	; 15
    while (!GETBIT(SPSR, SPIF));
 18c:	77 9b       	sbis	0x0e, 7	; 14
 18e:	fe cf       	rjmp	.-4      	; 0x18c <SPI_u8SendReceive+0x2>

    /* Flag will clear when read it */
    return SPDR;
 190:	8f b1       	in	r24, 0x0f	; 15
}
 192:	08 95       	ret

00000194 <SER_SPIvoidInitPinMaster>:
 * @brief Initialize Pin for Master
 * 
 */
void SER_SPIvoidInitPinMaster(void)
{
    DIO_voidSetPinDirection(PORT_B, PIN4, OUTPUT);
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_B, PIN5, OUTPUT);
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	65 e0       	ldi	r22, 0x05	; 5
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_B, PIN6, INPUT);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	66 e0       	ldi	r22, 0x06	; 6
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_B, PIN7, OUTPUT);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	67 e0       	ldi	r22, 0x07	; 7
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
