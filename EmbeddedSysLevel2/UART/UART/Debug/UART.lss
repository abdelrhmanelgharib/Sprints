
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001ce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a2  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070f  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c7  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029d  00000000  00000000  00001ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8a:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestInit>:


void TestInit(void)
{
    EN_ERRORSTATE_t state;
    state = UART_ENInit();
  92:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_ENInit>

    assert(state == E_OK);
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	11 f0       	breq	.+4      	; 0x9e <TestInit+0xc>
  9a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <abort>
  9e:	08 95       	ret

000000a0 <TestSendData>:
}

void TestSendData(void)
{
    EN_ERRORSTATE_t state;
    state = UART_ENSendData('x');
  a0:	88 e7       	ldi	r24, 0x78	; 120
  a2:	0e 94 8d 00 	call	0x11a	; 0x11a <UART_ENSendData>
    assert(state == E_OK);
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	11 f0       	breq	.+4      	; 0xae <TestSendData+0xe>
  aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <abort>
  ae:	08 95       	ret

000000b0 <TestSendNoBlock>:


void TestSendNoBlock(void)
{
    EN_ERRORSTATE_t state;
    state = UART_ENSendNoBlock('x');
  b0:	88 e7       	ldi	r24, 0x78	; 120
  b2:	0e 94 92 00 	call	0x124	; 0x124 <UART_ENSendNoBlock>
    assert(state == E_OK);
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	11 f0       	breq	.+4      	; 0xbe <TestSendNoBlock+0xe>
  ba:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <abort>
  be:	08 95       	ret

000000c0 <main>:
}


int main()
{
    TestInit();
  c0:	0e 94 49 00 	call	0x92	; 0x92 <TestInit>
    TestSendData();
  c4:	0e 94 50 00 	call	0xa0	; 0xa0 <TestSendData>
    TestSendNoBlock();
  c8:	0e 94 58 00 	call	0xb0	; 0xb0 <TestSendNoBlock>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <UART_ENInit>:
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
    UART_voidRXInterruptEnable();
    gPrece_str = Str;
}
  d2:	80 b5       	in	r24, 0x20	; 32
  d4:	8f 77       	andi	r24, 0x7F	; 127
  d6:	80 bd       	out	0x20, r24	; 32
  d8:	10 bc       	out	0x20, r1	; 32
  da:	83 e3       	ldi	r24, 0x33	; 51
  dc:	89 b9       	out	0x09, r24	; 9
  de:	59 98       	cbi	0x0b, 1	; 11
  e0:	80 b5       	in	r24, 0x20	; 32
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 bd       	out	0x20, r24	; 32
  e6:	80 b5       	in	r24, 0x20	; 32
  e8:	87 7f       	andi	r24, 0xF7	; 247
  ea:	80 bd       	out	0x20, r24	; 32
  ec:	80 b5       	in	r24, 0x20	; 32
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 bd       	out	0x20, r24	; 32
  f2:	80 b5       	in	r24, 0x20	; 32
  f4:	8f 7e       	andi	r24, 0xEF	; 239
  f6:	80 bd       	out	0x20, r24	; 32
  f8:	80 b5       	in	r24, 0x20	; 32
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	80 bd       	out	0x20, r24	; 32
  fe:	80 b5       	in	r24, 0x20	; 32
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 bd       	out	0x20, r24	; 32
 104:	80 b5       	in	r24, 0x20	; 32
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 bd       	out	0x20, r24	; 32
 10a:	80 b5       	in	r24, 0x20	; 32
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	80 bd       	out	0x20, r24	; 32
 110:	52 98       	cbi	0x0a, 2	; 10
 112:	54 9a       	sbi	0x0a, 4	; 10
 114:	53 9a       	sbi	0x0a, 3	; 10
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	08 95       	ret

0000011a <UART_ENSendData>:
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <UART_ENSendData>
 11e:	8c b9       	out	0x0c, r24	; 12
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	08 95       	ret

00000124 <UART_ENSendNoBlock>:
 124:	8c b9       	out	0x0c, r24	; 12
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret

0000012a <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
 13a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gPsend_str>
 142:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <gPsend_str+0x1>
 146:	e8 0f       	add	r30, r24
 148:	f1 1d       	adc	r31, r1
 14a:	80 81       	ld	r24, Z
 14c:	88 23       	and	r24, r24
 14e:	39 f0       	breq	.+14     	; 0x15e <__vector_15+0x34>
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
    UDR = Data;
 150:	8c b9       	out	0x0c, r24	; 12
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    {
        UART_ENSendNoBlock(gPsend_str[i]);
        i++;
 152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_15+0x3e>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        gFlag = 1;
 164:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gFlag>
    }
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 18a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(uint8_t *Data)
{
    return UDR;
 18e:	9c b1       	in	r25, 0x0c	; 12
 * 
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
 190:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <gPrece_str>
 194:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <gPrece_str+0x1>
 198:	e8 0f       	add	r30, r24
 19a:	f1 1d       	adc	r31, r1
 19c:	90 83       	st	Z, r25
    i++;
 19e:	8f 5f       	subi	r24, 0xFF	; 255
    if (i > 98)
 1a0:	83 36       	cpi	r24, 0x63	; 99
 1a2:	18 f4       	brcc	.+6      	; 0x1aa <__vector_13+0x32>
 */
void __vector_13(void)
{
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock(gPrece_str[i]);
    i++;
 1a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__vector_13+0x36>
    if (i > 98)
        i = 0;
 1aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <abort>:
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	f8 94       	cli
 1c6:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
