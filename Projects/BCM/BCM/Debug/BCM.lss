
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001710  000017a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000457  0080006c  0080006c  000017b0  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c9  00000000  00000000  0000391c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 0b 	call	0x167e	; 0x167e <main>
      8a:	0c 94 86 0b 	jmp	0x170c	; 0x170c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <SER_UARTvoidSendString+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	9b 83       	std	Y+3, r25	; 0x03
      a0:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
      a2:	19 82       	std	Y+1, r1	; 0x01
    for (i = 0; Str[i]; i++)
      a4:	19 82       	std	Y+1, r1	; 0x01
      a6:	0e c0       	rjmp	.+28     	; 0xc4 <SER_UARTvoidSendString+0x32>
    {
        UART_ENSendData(Str[i]);
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	28 2f       	mov	r18, r24
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	8a 81       	ldd	r24, Y+2	; 0x02
      b0:	9b 81       	ldd	r25, Y+3	; 0x03
      b2:	fc 01       	movw	r30, r24
      b4:	e2 0f       	add	r30, r18
      b6:	f3 1f       	adc	r31, r19
      b8:	80 81       	ld	r24, Z
      ba:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_ENSendData>
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	8f 5f       	subi	r24, 0xFF	; 255
      c2:	89 83       	std	Y+1, r24	; 0x01
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	28 2f       	mov	r18, r24
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	8a 81       	ldd	r24, Y+2	; 0x02
      cc:	9b 81       	ldd	r25, Y+3	; 0x03
      ce:	fc 01       	movw	r30, r24
      d0:	e2 0f       	add	r30, r18
      d2:	f3 1f       	adc	r31, r19
      d4:	80 81       	ld	r24, Z
      d6:	88 23       	and	r24, r24
      d8:	39 f7       	brne	.-50     	; 0xa8 <SER_UARTvoidSendString+0x16>
    {
        UART_ENSendData(Str[i]);
    }
    UART_ENSendData('\r');
      da:	8d e0       	ldi	r24, 0x0D	; 13
      dc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_ENSendData>
}
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	cf 91       	pop	r28
      e8:	df 91       	pop	r29
      ea:	08 95       	ret

000000ec <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	00 d0       	rcall	.+0      	; 0xf6 <SER_UARTvoidReceiveString+0xa>
      f6:	0f 92       	push	r0
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	9b 83       	std	Y+3, r25	; 0x03
      fe:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     100:	19 82       	std	Y+1, r1	; 0x01
    Str[i] = UART_u8ReceiveData();
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	28 2f       	mov	r18, r24
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	9b 81       	ldd	r25, Y+3	; 0x03
     10c:	8c 01       	movw	r16, r24
     10e:	02 0f       	add	r16, r18
     110:	13 1f       	adc	r17, r19
     112:	0e 94 11 02 	call	0x422	; 0x422 <UART_u8ReceiveData>
     116:	f8 01       	movw	r30, r16
     118:	80 83       	st	Z, r24
     11a:	0f c0       	rjmp	.+30     	; 0x13a <SER_UARTvoidReceiveString+0x4e>
    while (Str[i] != '\r')
    {
        i++;
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	8f 5f       	subi	r24, 0xFF	; 255
     120:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_u8ReceiveData();
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	28 2f       	mov	r18, r24
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	9b 81       	ldd	r25, Y+3	; 0x03
     12c:	8c 01       	movw	r16, r24
     12e:	02 0f       	add	r16, r18
     130:	13 1f       	adc	r17, r19
     132:	0e 94 11 02 	call	0x422	; 0x422 <UART_u8ReceiveData>
     136:	f8 01       	movw	r30, r16
     138:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '\r')
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	8a 81       	ldd	r24, Y+2	; 0x02
     142:	9b 81       	ldd	r25, Y+3	; 0x03
     144:	fc 01       	movw	r30, r24
     146:	e2 0f       	add	r30, r18
     148:	f3 1f       	adc	r31, r19
     14a:	80 81       	ld	r24, Z
     14c:	8d 30       	cpi	r24, 0x0D	; 13
     14e:	31 f7       	brne	.-52     	; 0x11c <SER_UARTvoidReceiveString+0x30>
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = 0;
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	28 2f       	mov	r18, r24
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	8a 81       	ldd	r24, Y+2	; 0x02
     158:	9b 81       	ldd	r25, Y+3	; 0x03
     15a:	fc 01       	movw	r30, r24
     15c:	e2 0f       	add	r30, r18
     15e:	f3 1f       	adc	r31, r19
     160:	10 82       	st	Z, r1
}
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	cf 91       	pop	r28
     16a:	df 91       	pop	r29
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <SER_UARTvoidReceiveStringNoBLOCKING>:
 * @brief Receive No Blocking 
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveStringNoBLOCKING(uint8_t *Str)
{
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	00 d0       	rcall	.+0      	; 0x178 <SER_UARTvoidReceiveStringNoBLOCKING+0x6>
     178:	00 d0       	rcall	.+0      	; 0x17a <SER_UARTvoidReceiveStringNoBLOCKING+0x8>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9c 83       	std	Y+4, r25	; 0x04
     180:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0, Data = 0;
     182:	19 82       	std	Y+1, r1	; 0x01
     184:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if (UART_u8ReceiveNoBlock(&Data))
     186:	ce 01       	movw	r24, r28
     188:	02 96       	adiw	r24, 0x02	; 2
     18a:	0e 94 4a 02 	call	0x494	; 0x494 <UART_u8ReceiveNoBlock>
     18e:	88 23       	and	r24, r24
     190:	c1 f0       	breq	.+48     	; 0x1c2 <SER_UARTvoidReceiveStringNoBLOCKING+0x50>
        {
            Str[i] = Data;
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	28 2f       	mov	r18, r24
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	fc 01       	movw	r30, r24
     19e:	e2 0f       	add	r30, r18
     1a0:	f3 1f       	adc	r31, r19
     1a2:	8a 81       	ldd	r24, Y+2	; 0x02
     1a4:	80 83       	st	Z, r24
            i++;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	8f 5f       	subi	r24, 0xFF	; 255
     1aa:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
            break;
        }
    } while (Str[i] - 1 != '\r');
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	8b 81       	ldd	r24, Y+3	; 0x03
     1b4:	9c 81       	ldd	r25, Y+4	; 0x04
     1b6:	fc 01       	movw	r30, r24
     1b8:	e2 0f       	add	r30, r18
     1ba:	f3 1f       	adc	r31, r19
     1bc:	80 81       	ld	r24, Z
     1be:	8e 30       	cpi	r24, 0x0E	; 14
     1c0:	11 f7       	brne	.-60     	; 0x186 <SER_UARTvoidReceiveStringNoBLOCKING+0x14>

    /* replace to NULL */
    Str[i - 1] = '\0';
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	88 2f       	mov	r24, r24
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	9c 01       	movw	r18, r24
     1ca:	21 50       	subi	r18, 0x01	; 1
     1cc:	30 40       	sbci	r19, 0x00	; 0
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	9c 81       	ldd	r25, Y+4	; 0x04
     1d2:	fc 01       	movw	r30, r24
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	10 82       	st	Z, r1
}
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	cf 91       	pop	r28
     1e4:	df 91       	pop	r29
     1e6:	08 95       	ret

000001e8 <SER_UARTvoidSendLongNum>:
 * @brief Send Number
 * 
 * @param Numb Number
 */
void SER_UARTvoidSendLongNum(uint32_t Numb)
{
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <SER_UARTvoidSendLongNum+0x6>
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <SER_UARTvoidSendLongNum+0x8>
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	69 83       	std	Y+1, r22	; 0x01
     1f6:	7a 83       	std	Y+2, r23	; 0x02
     1f8:	8b 83       	std	Y+3, r24	; 0x03
     1fa:	9c 83       	std	Y+4, r25	; 0x04
    UART_ENSendData((uint8_t)(Numb & 0x000000FF));
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 8) & 0x000000FF));
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	ab 81       	ldd	r26, Y+3	; 0x03
     208:	bc 81       	ldd	r27, Y+4	; 0x04
     20a:	89 2f       	mov	r24, r25
     20c:	9a 2f       	mov	r25, r26
     20e:	ab 2f       	mov	r26, r27
     210:	bb 27       	eor	r27, r27
     212:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 16) & 0x000000FF));
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	ab 81       	ldd	r26, Y+3	; 0x03
     21c:	bc 81       	ldd	r27, Y+4	; 0x04
     21e:	cd 01       	movw	r24, r26
     220:	aa 27       	eor	r26, r26
     222:	bb 27       	eor	r27, r27
     224:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 24) & 0x000000FF));
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	ab 81       	ldd	r26, Y+3	; 0x03
     22e:	bc 81       	ldd	r27, Y+4	; 0x04
     230:	8b 2f       	mov	r24, r27
     232:	99 27       	eor	r25, r25
     234:	aa 27       	eor	r26, r26
     236:	bb 27       	eor	r27, r27
     238:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_ENSendData>
}
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	cf 91       	pop	r28
     246:	df 91       	pop	r29
     248:	08 95       	ret

0000024a <SER_UARTu32ReceiveLongNum>:
 * @brief Receive Number
 * 
 * @return Number
 */
uint32_t SER_UARTu32ReceiveLongNum(void)
{
     24a:	df 93       	push	r29
     24c:	cf 93       	push	r28
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	28 97       	sbiw	r28, 0x08	; 8
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
    /* Receive 32Bit divide on 4 Times */
    uint8_t B1 = UART_u8ReceiveData();
     25e:	0e 94 11 02 	call	0x422	; 0x422 <UART_u8ReceiveData>
     262:	88 87       	std	Y+8, r24	; 0x08
    uint8_t B2 = UART_u8ReceiveData();
     264:	0e 94 11 02 	call	0x422	; 0x422 <UART_u8ReceiveData>
     268:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t B3 = UART_u8ReceiveData();
     26a:	0e 94 11 02 	call	0x422	; 0x422 <UART_u8ReceiveData>
     26e:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t B4 = UART_u8ReceiveData();
     270:	0e 94 11 02 	call	0x422	; 0x422 <UART_u8ReceiveData>
     274:	8d 83       	std	Y+5, r24	; 0x05

    /*  */
    uint32_t u32_Numb = B1 | ((uint32_t)B2 << 8) | ((uint32_t)B3 << 16) | ((uint32_t)B4 << 24);
     276:	88 85       	ldd	r24, Y+8	; 0x08
     278:	28 2f       	mov	r18, r24
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	8f 81       	ldd	r24, Y+7	; 0x07
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	a0 e0       	ldi	r26, 0x00	; 0
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	ba 2f       	mov	r27, r26
     28c:	a9 2f       	mov	r26, r25
     28e:	98 2f       	mov	r25, r24
     290:	88 27       	eor	r24, r24
     292:	28 2b       	or	r18, r24
     294:	39 2b       	or	r19, r25
     296:	4a 2b       	or	r20, r26
     298:	5b 2b       	or	r21, r27
     29a:	8e 81       	ldd	r24, Y+6	; 0x06
     29c:	88 2f       	mov	r24, r24
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	a0 e0       	ldi	r26, 0x00	; 0
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	dc 01       	movw	r26, r24
     2a6:	99 27       	eor	r25, r25
     2a8:	88 27       	eor	r24, r24
     2aa:	28 2b       	or	r18, r24
     2ac:	39 2b       	or	r19, r25
     2ae:	4a 2b       	or	r20, r26
     2b0:	5b 2b       	or	r21, r27
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	a0 e0       	ldi	r26, 0x00	; 0
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	b8 2f       	mov	r27, r24
     2be:	aa 27       	eor	r26, r26
     2c0:	99 27       	eor	r25, r25
     2c2:	88 27       	eor	r24, r24
     2c4:	82 2b       	or	r24, r18
     2c6:	93 2b       	or	r25, r19
     2c8:	a4 2b       	or	r26, r20
     2ca:	b5 2b       	or	r27, r21
     2cc:	89 83       	std	Y+1, r24	; 0x01
     2ce:	9a 83       	std	Y+2, r25	; 0x02
     2d0:	ab 83       	std	Y+3, r26	; 0x03
     2d2:	bc 83       	std	Y+4, r27	; 0x04

    return u32_Numb;
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	ab 81       	ldd	r26, Y+3	; 0x03
     2da:	bc 81       	ldd	r27, Y+4	; 0x04
}
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	28 96       	adiw	r28, 0x08	; 8
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	08 95       	ret

000002f2 <UART_ENInit>:
 * @brief Initialized UART 
 * 
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENInit(void)
{
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	0f 92       	push	r0
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
    EN_ERRORSTATE_t Enstate;
    Enstate = E_OK;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	89 83       	std	Y+1, r24	; 0x01
    /* Clear  URSEL to update UBRRH*/
    CLRBIT(UCSRC, URSEL);
     300:	a0 e4       	ldi	r26, 0x40	; 64
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	e0 e4       	ldi	r30, 0x40	; 64
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	8f 77       	andi	r24, 0x7F	; 127
     30c:	8c 93       	st	X, r24
    /* Boud Rate */
    UBRRH = HIGHUBRR;
     30e:	e0 e4       	ldi	r30, 0x40	; 64
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	10 82       	st	Z, r1
    UBRRL = LOWUBRR;
     314:	e9 e2       	ldi	r30, 0x29	; 41
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	83 e3       	ldi	r24, 0x33	; 51
     31a:	80 83       	st	Z, r24
#if UART_SPEED == DOUBLE
    SETBIT(UCSRA, U2X);

/* UART NORMAL Speed */
#elif UART_SPEED == NORMAL
    CLRBIT(UCSRA, U2X);
     31c:	ab e2       	ldi	r26, 0x2B	; 43
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	eb e2       	ldi	r30, 0x2B	; 43
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	8d 7f       	andi	r24, 0xFD	; 253
     328:	8c 93       	st	X, r24
#endif

/* Select STOP Bit */
#if STOPBIT == _1BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     32a:	a0 e4       	ldi	r26, 0x40	; 64
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	e0 e4       	ldi	r30, 0x40	; 64
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	80 68       	ori	r24, 0x80	; 128
     336:	8c 93       	st	X, r24
    CLRBIT(UCSRC, USBS);
     338:	a0 e4       	ldi	r26, 0x40	; 64
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e0 e4       	ldi	r30, 0x40	; 64
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	87 7f       	andi	r24, 0xF7	; 247
     344:	8c 93       	st	X, r24

/* Disable Parity */
#if UART_PARITY == DISABLED

    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     346:	a0 e4       	ldi	r26, 0x40	; 64
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	e0 e4       	ldi	r30, 0x40	; 64
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	80 68       	ori	r24, 0x80	; 128
     352:	8c 93       	st	X, r24

    CLRBIT(UCSRC, UPM0);
     354:	a0 e4       	ldi	r26, 0x40	; 64
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	e0 e4       	ldi	r30, 0x40	; 64
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	8f 7e       	andi	r24, 0xEF	; 239
     360:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UPM1);
     362:	a0 e4       	ldi	r26, 0x40	; 64
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e0 e4       	ldi	r30, 0x40	; 64
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UCSZ0);
    SETBIT(UCSRC, UCSZ1);
    CLRBIT(UCSRB, UCSZ2);
#elif DATAFRAM == _8BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     370:	a0 e4       	ldi	r26, 0x40	; 64
     372:	b0 e0       	ldi	r27, 0x00	; 0
     374:	e0 e4       	ldi	r30, 0x40	; 64
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	80 68       	ori	r24, 0x80	; 128
     37c:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ0);
     37e:	a0 e4       	ldi	r26, 0x40	; 64
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	e0 e4       	ldi	r30, 0x40	; 64
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	82 60       	ori	r24, 0x02	; 2
     38a:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ1);
     38c:	a0 e4       	ldi	r26, 0x40	; 64
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	e0 e4       	ldi	r30, 0x40	; 64
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	84 60       	ori	r24, 0x04	; 4
     398:	8c 93       	st	X, r24
    CLRBIT(UCSRB, UCSZ2);
     39a:	aa e2       	ldi	r26, 0x2A	; 42
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	ea e2       	ldi	r30, 0x2A	; 42
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	8b 7f       	andi	r24, 0xFB	; 251
     3a6:	8c 93       	st	X, r24

    /**
     * @brief Receiver Enable
     * 
     */
    SETBIT(UCSRB, RXEN);
     3a8:	aa e2       	ldi	r26, 0x2A	; 42
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ea e2       	ldi	r30, 0x2A	; 42
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	80 61       	ori	r24, 0x10	; 16
     3b4:	8c 93       	st	X, r24
    /**
     * @brief Transmitter Enable
     * 
     */
    SETBIT(UCSRB, TXEN);
     3b6:	aa e2       	ldi	r26, 0x2A	; 42
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	ea e2       	ldi	r30, 0x2A	; 42
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	88 60       	ori	r24, 0x08	; 8
     3c2:	8c 93       	st	X, r24

    return Enstate;
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
} /* UART_ENInit */
     3c6:	0f 90       	pop	r0
     3c8:	cf 91       	pop	r28
     3ca:	df 91       	pop	r29
     3cc:	08 95       	ret

000003ce <UART_ENSendData>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendData(uint8_t Data)
{
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	0f 92       	push	r0
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	89 83       	std	Y+1, r24	; 0x01
    /* Wait to Data Register Empty */
    while (!GETBIT(UCSRA, UDRE))
     3da:	eb e2       	ldi	r30, 0x2B	; 43
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	82 95       	swap	r24
     3e2:	86 95       	lsr	r24
     3e4:	87 70       	andi	r24, 0x07	; 7
     3e6:	88 2f       	mov	r24, r24
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	81 70       	andi	r24, 0x01	; 1
     3ec:	90 70       	andi	r25, 0x00	; 0
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	a1 f3       	breq	.-24     	; 0x3da <UART_ENSendData+0xc>
        ;

    UDR = Data;
     3f2:	ec e2       	ldi	r30, 0x2C	; 44
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	80 83       	st	Z, r24
    return E_OK;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
}
     3fc:	0f 90       	pop	r0
     3fe:	cf 91       	pop	r28
     400:	df 91       	pop	r29
     402:	08 95       	ret

00000404 <UART_ENSendNoBlock>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	0f 92       	push	r0
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	89 83       	std	Y+1, r24	; 0x01
    UDR = Data;
     410:	ec e2       	ldi	r30, 0x2C	; 44
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	80 83       	st	Z, r24
    return E_OK;
     418:	81 e0       	ldi	r24, 0x01	; 1
}
     41a:	0f 90       	pop	r0
     41c:	cf 91       	pop	r28
     41e:	df 91       	pop	r29
     420:	08 95       	ret

00000422 <UART_u8ReceiveData>:
 * @brief Receive Data From another device
 * 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveData(void)
{
     422:	df 93       	push	r29
     424:	cf 93       	push	r28
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
    while (!GETBIT(UCSRA, RXC))
     42a:	eb e2       	ldi	r30, 0x2B	; 43
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	88 23       	and	r24, r24
     432:	dc f7       	brge	.-10     	; 0x42a <UART_u8ReceiveData+0x8>
        ;
    return UDR;
     434:	ec e2       	ldi	r30, 0x2C	; 44
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
}
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	08 95       	ret

00000440 <UART_voidTXInterruptDisable>:
/**
 * @brief Disable Transmit Interrupt
 *
 */
void UART_voidTXInterruptDisable(void)
{
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, TXCIE);
     448:	aa e2       	ldi	r26, 0x2A	; 42
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	ea e2       	ldi	r30, 0x2A	; 42
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	8f 7b       	andi	r24, 0xBF	; 191
     454:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
     456:	af e5       	ldi	r26, 0x5F	; 95
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	ef e5       	ldi	r30, 0x5F	; 95
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	8f 77       	andi	r24, 0x7F	; 127
     462:	8c 93       	st	X, r24
}
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <UART_voidRXInterruptDisable>:
/**
 * @brief Disable Receive Interrupt
 *
 */
void UART_voidRXInterruptDisable(void)
{
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, RXCIE);
     472:	aa e2       	ldi	r26, 0x2A	; 42
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	ea e2       	ldi	r30, 0x2A	; 42
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	8f 77       	andi	r24, 0x7F	; 127
     47e:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
     480:	af e5       	ldi	r26, 0x5F	; 95
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	ef e5       	ldi	r30, 0x5F	; 95
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	8f 77       	andi	r24, 0x7F	; 127
     48c:	8c 93       	st	X, r24
}
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <UART_u8ReceiveNoBlock>:
 * 
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock()
{
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	0f 92       	push	r0
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
    uint8_t status = 0;
     49e:	19 82       	std	Y+1, r1	; 0x01
//    else
//    {
//        /* do nothing */
//    }

    return UDR;
     4a0:	ec e2       	ldi	r30, 0x2C	; 44
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
}
     4a6:	0f 90       	pop	r0
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	08 95       	ret

000004ae <UART_voidTXInterruptEnable>:
/**
 * @brief Enable Transmit Interrupt
 * 
 */
void UART_voidTXInterruptEnable(void)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, TXCIE);
     4b6:	aa e2       	ldi	r26, 0x2A	; 42
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	ea e2       	ldi	r30, 0x2A	; 42
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	80 64       	ori	r24, 0x40	; 64
     4c2:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
     4c4:	af e5       	ldi	r26, 0x5F	; 95
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	ef e5       	ldi	r30, 0x5F	; 95
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	80 68       	ori	r24, 0x80	; 128
     4d0:	8c 93       	st	X, r24
}
     4d2:	cf 91       	pop	r28
     4d4:	df 91       	pop	r29
     4d6:	08 95       	ret

000004d8 <UART_voidRXInterruptEnable>:
/**
 * @brief Enable Receive Interrupt
 * 
 */
void UART_voidRXInterruptEnable(void)
{
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, RXCIE);
     4e0:	aa e2       	ldi	r26, 0x2A	; 42
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	ea e2       	ldi	r30, 0x2A	; 42
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
     4ee:	af e5       	ldi	r26, 0x5F	; 95
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	ef e5       	ldi	r30, 0x5F	; 95
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	80 68       	ori	r24, 0x80	; 128
     4fa:	8c 93       	st	X, r24
}
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	08 95       	ret

00000502 <UART_voidSendString_Ashync>:
 * @brief Asynchronous Function Send 
 * 
 * @param str Data to send
 */
void UART_voidSendString_Ashync(uint8_t *str)
{
     502:	df 93       	push	r29
     504:	cf 93       	push	r28
     506:	00 d0       	rcall	.+0      	; 0x508 <UART_voidSendString_Ashync+0x6>
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
    /* Flag using For Protection if call function before string is end */
    if (gFlag == 1)
     510:	80 91 60 00 	lds	r24, 0x0060
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	79 f4       	brne	.+30     	; 0x536 <UART_voidSendString_Ashync+0x34>
    {
        /* Send First Letter we bsend b2y fy ISR*/
        UART_ENSendNoBlock(str[0]);
     518:	e9 81       	ldd	r30, Y+1	; 0x01
     51a:	fa 81       	ldd	r31, Y+2	; 0x02
     51c:	80 81       	ld	r24, Z
     51e:	0e 94 02 02 	call	0x404	; 0x404 <UART_ENSendNoBlock>

        /* Flag will Fired when data is Sent Then go to isr */
        UART_voidTXInterruptEnable();
     522:	0e 94 57 02 	call	0x4ae	; 0x4ae <UART_voidTXInterruptEnable>
        gPsend_str = str;
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	90 93 6d 00 	sts	0x006D, r25
     52e:	80 93 6c 00 	sts	0x006C, r24
        gFlag = 0;
     532:	10 92 60 00 	sts	0x0060, r1
    }
}
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <UART_voidReceiveString_Ashync>:
 * @brief Asynchronous Function Receive 
 * 
 * @param Str Data to Receive
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	00 d0       	rcall	.+0      	; 0x546 <UART_voidReceiveString_Ashync+0x6>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	9a 83       	std	Y+2, r25	; 0x02
     54c:	89 83       	std	Y+1, r24	; 0x01
    UART_voidRXInterruptEnable();
     54e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <UART_voidRXInterruptEnable>
    gPrece_str = Str;
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	9a 81       	ldd	r25, Y+2	; 0x02
     556:	90 93 6f 00 	sts	0x006F, r25
     55a:	80 93 6e 00 	sts	0x006E, r24
}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
//    else
//    {
//        i = 1;
//        gFlag = 1;
//    }
	BCM_TX_Handller();
     592:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <BCM_TX_Handller>
//	if (j==pstr_currentTask->u8_byteCounter){
//
//		pstr_currentTask->u8_taskStatus=BCM_IDLE;
//		j=0;
//	}
}
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	ff 91       	pop	r31
     59c:	ef 91       	pop	r30
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	0f 90       	pop	r0
     5b8:	1f 90       	pop	r1
     5ba:	18 95       	reti

000005bc <MUSART1_voidSetCallBack>:

/**
 * @brief Receive interrupt
 * 
 */
void MUSART1_voidSetCallBack(void (*ptr) (void) ){
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <MUSART1_voidSetCallBack+0x6>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
   MUSART1_CallBack = ptr;
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	90 93 71 00 	sts	0x0071, r25
     5d2:	80 93 70 00 	sts	0x0070, r24
}
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	cf 91       	pop	r28
     5dc:	df 91       	pop	r29
     5de:	08 95       	ret

000005e0 <__vector_13>:
void __vector_13(void)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	2f 93       	push	r18
     5ec:	3f 93       	push	r19
     5ee:	4f 93       	push	r20
     5f0:	5f 93       	push	r21
     5f2:	6f 93       	push	r22
     5f4:	7f 93       	push	r23
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
//	        i++;
//	    }
//
//	    if (i > 98)
//	       i = 0;
	    BCM_RX_Handller();
     60a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <BCM_RX_Handller>
}
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <SPI_VidInitMaster>:
#include "UART_int.h"
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_VidInitMaster(void) 
{
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DDRB = DDRB | (1<<PB4);
     63c:	a7 e3       	ldi	r26, 0x37	; 55
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	e7 e3       	ldi	r30, 0x37	; 55
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	80 61       	ori	r24, 0x10	; 16
     648:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB5);
     64a:	a7 e3       	ldi	r26, 0x37	; 55
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	e7 e3       	ldi	r30, 0x37	; 55
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	80 62       	ori	r24, 0x20	; 32
     656:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PB6);
     658:	a7 e3       	ldi	r26, 0x37	; 55
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	e7 e3       	ldi	r30, 0x37	; 55
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	8f 7b       	andi	r24, 0xBF	; 191
     664:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB7);
     666:	a7 e3       	ldi	r26, 0x37	; 55
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e7 e3       	ldi	r30, 0x37	; 55
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	80 68       	ori	r24, 0x80	; 128
     672:	8c 93       	st	X, r24

	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
     674:	ed e2       	ldi	r30, 0x2D	; 45
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 e5       	ldi	r24, 0x50	; 80
     67a:	80 83       	st	Z, r24
}
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	08 95       	ret

00000682 <SPI_VidInitSlave>:

void SPI_VidInitSlave(void)
{ 
     682:	df 93       	push	r29
     684:	cf 93       	push	r28
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));  
     68a:	a7 e3       	ldi	r26, 0x37	; 55
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	e7 e3       	ldi	r30, 0x37	; 55
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	8f 7e       	andi	r24, 0xEF	; 239
     696:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB5));
     698:	a7 e3       	ldi	r26, 0x37	; 55
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	e7 e3       	ldi	r30, 0x37	; 55
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	8f 7d       	andi	r24, 0xDF	; 223
     6a4:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB6);
     6a6:	a7 e3       	ldi	r26, 0x37	; 55
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	e7 e3       	ldi	r30, 0x37	; 55
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	80 64       	ori	r24, 0x40	; 64
     6b2:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB7));
     6b4:	a7 e3       	ldi	r26, 0x37	; 55
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	e7 e3       	ldi	r30, 0x37	; 55
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	8f 77       	andi	r24, 0x7F	; 127
     6c0:	8c 93       	st	X, r24
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
     6c2:	ed e2       	ldi	r30, 0x2D	; 45
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 e4       	ldi	r24, 0x40	; 64
     6c8:	80 83       	st	Z, r24
}
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	08 95       	ret

000006d0 <SPI_VidSendByte>:

void SPI_VidSendByte( uint8_t copy_U8Data)
{
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	0f 92       	push	r0
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	89 83       	std	Y+1, r24	; 0x01
	SPDR = copy_U8Data; //send data by SPI
     6dc:	ef e2       	ldi	r30, 0x2F	; 47
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	80 83       	st	Z, r24
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
     6e4:	ee e2       	ldi	r30, 0x2E	; 46
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	dc f7       	brge	.-10     	; 0x6e4 <SPI_VidSendByte+0x14>
}
     6ee:	0f 90       	pop	r0
     6f0:	cf 91       	pop	r28
     6f2:	df 91       	pop	r29
     6f4:	08 95       	ret

000006f6 <SPI_U8RecieveByte_admin>:
uint8_t SPI_U8RecieveByte_admin(void){
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <SPI_U8RecieveByte_admin+0x6>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <SPI_U8RecieveByte_admin+0x8>
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
	uint32_t count=0;
     702:	19 82       	std	Y+1, r1	; 0x01
     704:	1a 82       	std	Y+2, r1	; 0x02
     706:	1b 82       	std	Y+3, r1	; 0x03
     708:	1c 82       	std	Y+4, r1	; 0x04
     70a:	17 c0       	rjmp	.+46     	; 0x73a <SPI_U8RecieveByte_admin+0x44>

	while (!((SPSR) & (1 << SPIF))){	   //wait until SPI interrupt flag=1(data is receive correctly)
		if((count==3000000)){
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	ab 81       	ldd	r26, Y+3	; 0x03
     712:	bc 81       	ldd	r27, Y+4	; 0x04
     714:	80 3c       	cpi	r24, 0xC0	; 192
     716:	26 ec       	ldi	r18, 0xC6	; 198
     718:	92 07       	cpc	r25, r18
     71a:	2d e2       	ldi	r18, 0x2D	; 45
     71c:	a2 07       	cpc	r26, r18
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	b2 07       	cpc	r27, r18
     722:	81 f0       	breq	.+32     	; 0x744 <SPI_U8RecieveByte_admin+0x4e>

			break;
		}
		else{
			count++;
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
     728:	ab 81       	ldd	r26, Y+3	; 0x03
     72a:	bc 81       	ldd	r27, Y+4	; 0x04
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	a1 1d       	adc	r26, r1
     730:	b1 1d       	adc	r27, r1
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	ab 83       	std	Y+3, r26	; 0x03
     738:	bc 83       	std	Y+4, r27	; 0x04
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
}
uint8_t SPI_U8RecieveByte_admin(void){
	uint32_t count=0;

	while (!((SPSR) & (1 << SPIF))){	   //wait until SPI interrupt flag=1(data is receive correctly)
     73a:	ee e2       	ldi	r30, 0x2E	; 46
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	88 23       	and	r24, r24
     742:	24 f7       	brge	.-56     	; 0x70c <SPI_U8RecieveByte_admin+0x16>
			count++;

		}

	}
	return SPDR; //return the received byte from SPI data register
     744:	ef e2       	ldi	r30, 0x2F	; 47
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z

}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	cf 91       	pop	r28
     754:	df 91       	pop	r29
     756:	08 95       	ret

00000758 <SPI_U8RecieveByte>:



uint8_t SPI_U8RecieveByte(void)
{
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62

	while (!((SPSR) & (1 << SPIF)));	   //wait until SPI interrupt flag=1(data is receive correctly)
     760:	ee e2       	ldi	r30, 0x2E	; 46
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	88 23       	and	r24, r24
     768:	dc f7       	brge	.-10     	; 0x760 <SPI_U8RecieveByte+0x8>
	return SPDR; //return the received byte from SPI data register
     76a:	ef e2       	ldi	r30, 0x2F	; 47
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z

}
     770:	cf 91       	pop	r28
     772:	df 91       	pop	r29
     774:	08 95       	ret

00000776 <SPI_VidSendString>:
void SPI_VidSendString( uint8_t *copy_str)
{
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	00 d0       	rcall	.+0      	; 0x77c <SPI_VidSendString+0x6>
     77c:	0f 92       	push	r0
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	9b 83       	std	Y+3, r25	; 0x03
     784:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     786:	19 82       	std	Y+1, r1	; 0x01
     788:	0e c0       	rjmp	.+28     	; 0x7a6 <SPI_VidSendString+0x30>

	while(copy_str[i] != '\0')
	{

		SPI_VidSendByte(copy_str[i]);
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	28 2f       	mov	r18, r24
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	9b 81       	ldd	r25, Y+3	; 0x03
     794:	fc 01       	movw	r30, r24
     796:	e2 0f       	add	r30, r18
     798:	f3 1f       	adc	r31, r19
     79a:	80 81       	ld	r24, Z
     79c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <SPI_VidSendByte>
		i++;
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	89 83       	std	Y+1, r24	; 0x01
}
void SPI_VidSendString( uint8_t *copy_str)
{
	uint8_t i = 0;

	while(copy_str[i] != '\0')
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	28 2f       	mov	r18, r24
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	9b 81       	ldd	r25, Y+3	; 0x03
     7b0:	fc 01       	movw	r30, r24
     7b2:	e2 0f       	add	r30, r18
     7b4:	f3 1f       	adc	r31, r19
     7b6:	80 81       	ld	r24, Z
     7b8:	88 23       	and	r24, r24
     7ba:	39 f7       	brne	.-50     	; 0x78a <SPI_VidSendString+0x14>

		SPI_VidSendByte(copy_str[i]);
		i++;

	}
	copy_str[i] = '\r';
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	28 2f       	mov	r18, r24
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	9b 81       	ldd	r25, Y+3	; 0x03
     7c6:	fc 01       	movw	r30, r24
     7c8:	e2 0f       	add	r30, r18
     7ca:	f3 1f       	adc	r31, r19
     7cc:	8d e0       	ldi	r24, 0x0D	; 13
     7ce:	80 83       	st	Z, r24
	copy_str[i+1] = '\0';
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	88 2f       	mov	r24, r24
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	9c 01       	movw	r18, r24
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
     7e0:	fc 01       	movw	r30, r24
     7e2:	e2 0f       	add	r30, r18
     7e4:	f3 1f       	adc	r31, r19
     7e6:	10 82       	st	Z, r1

}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	cf 91       	pop	r28
     7f0:	df 91       	pop	r29
     7f2:	08 95       	ret

000007f4 <SPI_VidRecieveString>:

void SPI_VidRecieveString(uint8_t *copy_str)
{
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <SPI_VidRecieveString+0xa>
     7fe:	0f 92       	push	r0
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	9b 83       	std	Y+3, r25	; 0x03
     806:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
     808:	19 82       	std	Y+1, r1	; 0x01
	copy_str[i] = SPI_U8RecieveByte();
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	8a 81       	ldd	r24, Y+2	; 0x02
     812:	9b 81       	ldd	r25, Y+3	; 0x03
     814:	8c 01       	movw	r16, r24
     816:	02 0f       	add	r16, r18
     818:	13 1f       	adc	r17, r19
     81a:	0e 94 ac 03 	call	0x758	; 0x758 <SPI_U8RecieveByte>
     81e:	f8 01       	movw	r30, r16
     820:	80 83       	st	Z, r24
     822:	0f c0       	rjmp	.+30     	; 0x842 <SPI_VidRecieveString+0x4e>
	while(copy_str[i] != '\r')
	{
		i++;
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	8f 5f       	subi	r24, 0xFF	; 255
     828:	89 83       	std	Y+1, r24	; 0x01
		copy_str[i] = SPI_U8RecieveByte();
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	28 2f       	mov	r18, r24
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	9b 81       	ldd	r25, Y+3	; 0x03
     834:	8c 01       	movw	r16, r24
     836:	02 0f       	add	r16, r18
     838:	13 1f       	adc	r17, r19
     83a:	0e 94 ac 03 	call	0x758	; 0x758 <SPI_U8RecieveByte>
     83e:	f8 01       	movw	r30, r16
     840:	80 83       	st	Z, r24

void SPI_VidRecieveString(uint8_t *copy_str)
{
	unsigned char i = 0;
	copy_str[i] = SPI_U8RecieveByte();
	while(copy_str[i] != '\r')
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	28 2f       	mov	r18, r24
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	8a 81       	ldd	r24, Y+2	; 0x02
     84a:	9b 81       	ldd	r25, Y+3	; 0x03
     84c:	fc 01       	movw	r30, r24
     84e:	e2 0f       	add	r30, r18
     850:	f3 1f       	adc	r31, r19
     852:	80 81       	ld	r24, Z
     854:	8d 30       	cpi	r24, 0x0D	; 13
     856:	31 f7       	brne	.-52     	; 0x824 <SPI_VidRecieveString+0x30>
	{
		i++;
		copy_str[i] = SPI_U8RecieveByte();
	}
	copy_str[i] = '\0';
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	28 2f       	mov	r18, r24
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	9b 81       	ldd	r25, Y+3	; 0x03
     862:	fc 01       	movw	r30, r24
     864:	e2 0f       	add	r30, r18
     866:	f3 1f       	adc	r31, r19
     868:	10 82       	st	Z, r1
}
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	cf 91       	pop	r28
     872:	df 91       	pop	r29
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <I2C_MasterInit>:

//#include "I2C_Private.h"

//#include <util/delay.h>

void I2C_MasterInit(void){
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
	// prescaler =1
		CLRBIT(TWSR,0);
     882:	a1 e2       	ldi	r26, 0x21	; 33
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	e1 e2       	ldi	r30, 0x21	; 33
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	8e 7f       	andi	r24, 0xFE	; 254
     88e:	8c 93       	st	X, r24
		CLRBIT(TWSR,1);
     890:	a1 e2       	ldi	r26, 0x21	; 33
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	e1 e2       	ldi	r30, 0x21	; 33
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	8d 7f       	andi	r24, 0xFD	; 253
     89c:	8c 93       	st	X, r24
		TWBR=32;//400khz
     89e:	e0 e2       	ldi	r30, 0x20	; 32
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 e2       	ldi	r24, 0x20	; 32
     8a4:	80 83       	st	Z, r24
		//SETBIT(TWCR,6);// enable ACK

		SETBIT(TWCR,2);// enable
     8a6:	a6 e5       	ldi	r26, 0x56	; 86
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e6 e5       	ldi	r30, 0x56	; 86
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	84 60       	ori	r24, 0x04	; 4
     8b2:	8c 93       	st	X, r24

		TWAR=0b00000111;
     8b4:	e2 e2       	ldi	r30, 0x22	; 34
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	87 e0       	ldi	r24, 0x07	; 7
     8ba:	80 83       	st	Z, r24



}
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	08 95       	ret

000008c2 <I2C_MasterStart>:
void I2C_MasterStart(void){
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,5);// enable start bit
     8ca:	a6 e5       	ldi	r26, 0x56	; 86
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	e6 e5       	ldi	r30, 0x56	; 86
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	80 62       	ori	r24, 0x20	; 32
     8d6:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
     8d8:	a6 e5       	ldi	r26, 0x56	; 86
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e6 e5       	ldi	r30, 0x56	; 86
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	80 68       	ori	r24, 0x80	; 128
     8e4:	8c 93       	st	X, r24

	while(GETBIT(TWCR,7)==0);
     8e6:	e6 e5       	ldi	r30, 0x56	; 86
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	88 23       	and	r24, r24
     8ee:	dc f7       	brge	.-10     	; 0x8e6 <I2C_MasterStart+0x24>

}
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	08 95       	ret

000008f6 <I2C_SlaveInit>:


void I2C_SlaveInit(void){
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;//400khz
     8fe:	e0 e2       	ldi	r30, 0x20	; 32
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	80 83       	st	Z, r24


	TWAR=0b00000010;
     906:	e2 e2       	ldi	r30, 0x22	; 34
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	80 83       	st	Z, r24
	SETBIT(TWCR,6);// enable ack
     90e:	a6 e5       	ldi	r26, 0x56	; 86
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	e6 e5       	ldi	r30, 0x56	; 86
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	80 64       	ori	r24, 0x40	; 64
     91a:	8c 93       	st	X, r24

	SETBIT(TWCR,2);// enable i2c
     91c:	a6 e5       	ldi	r26, 0x56	; 86
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	e6 e5       	ldi	r30, 0x56	; 86
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	84 60       	ori	r24, 0x04	; 4
     928:	8c 93       	st	X, r24

	//SETBIT(TWCR,7);// clear flag
	//while(GETBIT(TWCR,7)==0);


	I2C_ReadDataByte();
     92a:	0e 94 06 05 	call	0xa0c	; 0xa0c <I2C_ReadDataByte>


}
     92e:	cf 91       	pop	r28
     930:	df 91       	pop	r29
     932:	08 95       	ret

00000934 <I2C_SendSlaveAddressWithWrite>:

void I2C_SendSlaveAddressWithWrite(uint8_t address){
     934:	df 93       	push	r29
     936:	cf 93       	push	r28
     938:	0f 92       	push	r0
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
     940:	e3 e2       	ldi	r30, 0x23	; 35
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	88 0f       	add	r24, r24
     948:	80 83       	st	Z, r24
	/* Write operation */
		CLRBIT(TWDR,0);
     94a:	a3 e2       	ldi	r26, 0x23	; 35
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	e3 e2       	ldi	r30, 0x23	; 35
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	8e 7f       	andi	r24, 0xFE	; 254
     956:	8c 93       	st	X, r24
			CLRBIT(TWCR,5);// clear start bit
     958:	a6 e5       	ldi	r26, 0x56	; 86
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	e6 e5       	ldi	r30, 0x56	; 86
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	8f 7d       	andi	r24, 0xDF	; 223
     964:	8c 93       	st	X, r24
			SETBIT(TWCR,7);// clear flag
     966:	a6 e5       	ldi	r26, 0x56	; 86
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e6 e5       	ldi	r30, 0x56	; 86
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	80 68       	ori	r24, 0x80	; 128
     972:	8c 93       	st	X, r24
			while(GETBIT(TWCR,7)==0);
     974:	e6 e5       	ldi	r30, 0x56	; 86
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	88 23       	and	r24, r24
     97c:	dc f7       	brge	.-10     	; 0x974 <I2C_SendSlaveAddressWithWrite+0x40>
}
     97e:	0f 90       	pop	r0
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	08 95       	ret

00000986 <I2C_SendSlaveAddressWithRead>:

void I2C_SendSlaveAddressWithRead(uint8_t address){
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	0f 92       	push	r0
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
     992:	e3 e2       	ldi	r30, 0x23	; 35
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	88 0f       	add	r24, r24
     99a:	80 83       	st	Z, r24
	SETBIT(TWDR,0);// read
     99c:	a3 e2       	ldi	r26, 0x23	; 35
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	e3 e2       	ldi	r30, 0x23	; 35
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	81 60       	ori	r24, 0x01	; 1
     9a8:	8c 93       	st	X, r24

	CLRBIT(TWCR,5);// clear start bit
     9aa:	a6 e5       	ldi	r26, 0x56	; 86
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e6 e5       	ldi	r30, 0x56	; 86
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	8f 7d       	andi	r24, 0xDF	; 223
     9b6:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
     9b8:	a6 e5       	ldi	r26, 0x56	; 86
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	e6 e5       	ldi	r30, 0x56	; 86
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	80 68       	ori	r24, 0x80	; 128
     9c4:	8c 93       	st	X, r24
	while(GETBIT(TWCR,7)==0);
     9c6:	e6 e5       	ldi	r30, 0x56	; 86
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	88 23       	and	r24, r24
     9ce:	dc f7       	brge	.-10     	; 0x9c6 <I2C_SendSlaveAddressWithRead+0x40>
}
     9d0:	0f 90       	pop	r0
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <I2C_WriteDataByte>:

void I2C_WriteDataByte(uint8_t data){
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	0f 92       	push	r0
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	89 83       	std	Y+1, r24	; 0x01

TWDR=data;
     9e4:	e3 e2       	ldi	r30, 0x23	; 35
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	80 83       	st	Z, r24
SETBIT(TWCR,7);// clear flag
     9ec:	a6 e5       	ldi	r26, 0x56	; 86
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e6 e5       	ldi	r30, 0x56	; 86
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	80 68       	ori	r24, 0x80	; 128
     9f8:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
     9fa:	e6 e5       	ldi	r30, 0x56	; 86
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	88 23       	and	r24, r24
     a02:	dc f7       	brge	.-10     	; 0x9fa <I2C_WriteDataByte+0x22>

}
     a04:	0f 90       	pop	r0
     a06:	cf 91       	pop	r28
     a08:	df 91       	pop	r29
     a0a:	08 95       	ret

00000a0c <I2C_ReadDataByte>:
uint8_t I2C_ReadDataByte(void){
     a0c:	df 93       	push	r29
     a0e:	cf 93       	push	r28
     a10:	0f 92       	push	r0
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
SETBIT(TWCR,7);// clear flag
     a16:	a6 e5       	ldi	r26, 0x56	; 86
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e6 e5       	ldi	r30, 0x56	; 86
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
     a24:	e6 e5       	ldi	r30, 0x56	; 86
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	88 23       	and	r24, r24
     a2c:	dc f7       	brge	.-10     	; 0xa24 <I2C_ReadDataByte+0x18>

value=TWDR;
     a2e:	e3 e2       	ldi	r30, 0x23	; 35
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	89 83       	std	Y+1, r24	; 0x01
return value;
     a36:	89 81       	ldd	r24, Y+1	; 0x01
}
     a38:	0f 90       	pop	r0
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	08 95       	ret

00000a40 <I2C_MasterStop>:
void I2C_MasterStop(void){
     a40:	df 93       	push	r29
     a42:	cf 93       	push	r28
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,4);// enable stop bit
     a48:	a6 e5       	ldi	r26, 0x56	; 86
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e6 e5       	ldi	r30, 0x56	; 86
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	80 61       	ori	r24, 0x10	; 16
     a54:	8c 93       	st	X, r24
	SETBIT(TWCR,2);// enable i2c bit
     a56:	a6 e5       	ldi	r26, 0x56	; 86
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e6 e5       	ldi	r30, 0x56	; 86
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	84 60       	ori	r24, 0x04	; 4
     a62:	8c 93       	st	X, r24

	SETBIT(TWCR,7);// clear flag
     a64:	a6 e5       	ldi	r26, 0x56	; 86
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e6 e5       	ldi	r30, 0x56	; 86
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	80 68       	ori	r24, 0x80	; 128
     a70:	8c 93       	st	X, r24



}
     a72:	cf 91       	pop	r28
     a74:	df 91       	pop	r29
     a76:	08 95       	ret

00000a78 <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
     a78:	df 93       	push	r29
     a7a:	cf 93       	push	r28
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	28 97       	sbiw	r28, 0x08	; 8
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	8a 83       	std	Y+2, r24	; 0x02
     a8e:	6b 83       	std	Y+3, r22	; 0x03
     a90:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
     a96:	8c 81       	ldd	r24, Y+4	; 0x04
     a98:	88 23       	and	r24, r24
     a9a:	09 f0       	breq	.+2      	; 0xa9e <DIO_voidSetPinValue+0x26>
     a9c:	76 c0       	rjmp	.+236    	; 0xb8a <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
     a9e:	8a 81       	ldd	r24, Y+2	; 0x02
     aa0:	28 2f       	mov	r18, r24
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	38 87       	std	Y+8, r19	; 0x08
     aa6:	2f 83       	std	Y+7, r18	; 0x07
     aa8:	8f 81       	ldd	r24, Y+7	; 0x07
     aaa:	98 85       	ldd	r25, Y+8	; 0x08
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	91 05       	cpc	r25, r1
     ab0:	59 f1       	breq	.+86     	; 0xb08 <DIO_voidSetPinValue+0x90>
     ab2:	2f 81       	ldd	r18, Y+7	; 0x07
     ab4:	38 85       	ldd	r19, Y+8	; 0x08
     ab6:	22 30       	cpi	r18, 0x02	; 2
     ab8:	31 05       	cpc	r19, r1
     aba:	2c f4       	brge	.+10     	; 0xac6 <DIO_voidSetPinValue+0x4e>
     abc:	8f 81       	ldd	r24, Y+7	; 0x07
     abe:	98 85       	ldd	r25, Y+8	; 0x08
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	69 f0       	breq	.+26     	; 0xade <DIO_voidSetPinValue+0x66>
     ac4:	60 c0       	rjmp	.+192    	; 0xb86 <DIO_voidSetPinValue+0x10e>
     ac6:	2f 81       	ldd	r18, Y+7	; 0x07
     ac8:	38 85       	ldd	r19, Y+8	; 0x08
     aca:	22 30       	cpi	r18, 0x02	; 2
     acc:	31 05       	cpc	r19, r1
     ace:	89 f1       	breq	.+98     	; 0xb32 <DIO_voidSetPinValue+0xba>
     ad0:	8f 81       	ldd	r24, Y+7	; 0x07
     ad2:	98 85       	ldd	r25, Y+8	; 0x08
     ad4:	83 30       	cpi	r24, 0x03	; 3
     ad6:	91 05       	cpc	r25, r1
     ad8:	09 f4       	brne	.+2      	; 0xadc <DIO_voidSetPinValue+0x64>
     ada:	40 c0       	rjmp	.+128    	; 0xb5c <DIO_voidSetPinValue+0xe4>
     adc:	54 c0       	rjmp	.+168    	; 0xb86 <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
     ade:	ab e3       	ldi	r26, 0x3B	; 59
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	eb e3       	ldi	r30, 0x3B	; 59
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	48 2f       	mov	r20, r24
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	28 2f       	mov	r18, r24
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	02 2e       	mov	r0, r18
     af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_voidSetPinValue+0x84>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	0a 94       	dec	r0
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_voidSetPinValue+0x80>
     b00:	80 95       	com	r24
     b02:	84 23       	and	r24, r20
     b04:	8c 93       	st	X, r24
     b06:	b5 c0       	rjmp	.+362    	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
     b08:	a8 e3       	ldi	r26, 0x38	; 56
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e8 e3       	ldi	r30, 0x38	; 56
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	48 2f       	mov	r20, r24
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	28 2f       	mov	r18, r24
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	02 2e       	mov	r0, r18
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <DIO_voidSetPinValue+0xae>
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <DIO_voidSetPinValue+0xaa>
     b2a:	80 95       	com	r24
     b2c:	84 23       	and	r24, r20
     b2e:	8c 93       	st	X, r24
     b30:	a0 c0       	rjmp	.+320    	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
     b32:	a5 e3       	ldi	r26, 0x35	; 53
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e5 e3       	ldi	r30, 0x35	; 53
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	48 2f       	mov	r20, r24
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	28 2f       	mov	r18, r24
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	02 2e       	mov	r0, r18
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <DIO_voidSetPinValue+0xd8>
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	0a 94       	dec	r0
     b52:	e2 f7       	brpl	.-8      	; 0xb4c <DIO_voidSetPinValue+0xd4>
     b54:	80 95       	com	r24
     b56:	84 23       	and	r24, r20
     b58:	8c 93       	st	X, r24
     b5a:	8b c0       	rjmp	.+278    	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
     b5c:	a2 e3       	ldi	r26, 0x32	; 50
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e2 e3       	ldi	r30, 0x32	; 50
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	48 2f       	mov	r20, r24
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	02 2e       	mov	r0, r18
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_voidSetPinValue+0x102>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	0a 94       	dec	r0
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_voidSetPinValue+0xfe>
     b7e:	80 95       	com	r24
     b80:	84 23       	and	r24, r20
     b82:	8c 93       	st	X, r24
     b84:	76 c0       	rjmp	.+236    	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
     b86:	19 82       	std	Y+1, r1	; 0x01
     b88:	74 c0       	rjmp	.+232    	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	09 f0       	breq	.+2      	; 0xb92 <DIO_voidSetPinValue+0x11a>
     b90:	70 c0       	rjmp	.+224    	; 0xc72 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	3e 83       	std	Y+6, r19	; 0x06
     b9a:	2d 83       	std	Y+5, r18	; 0x05
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	91 05       	cpc	r25, r1
     ba4:	49 f1       	breq	.+82     	; 0xbf8 <DIO_voidSetPinValue+0x180>
     ba6:	2d 81       	ldd	r18, Y+5	; 0x05
     ba8:	3e 81       	ldd	r19, Y+6	; 0x06
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	2c f4       	brge	.+10     	; 0xbba <DIO_voidSetPinValue+0x142>
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	9e 81       	ldd	r25, Y+6	; 0x06
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	61 f0       	breq	.+24     	; 0xbd0 <DIO_voidSetPinValue+0x158>
     bb8:	5b c0       	rjmp	.+182    	; 0xc70 <DIO_voidSetPinValue+0x1f8>
     bba:	2d 81       	ldd	r18, Y+5	; 0x05
     bbc:	3e 81       	ldd	r19, Y+6	; 0x06
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	71 f1       	breq	.+92     	; 0xc20 <DIO_voidSetPinValue+0x1a8>
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	9e 81       	ldd	r25, Y+6	; 0x06
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	e9 f1       	breq	.+122    	; 0xc48 <DIO_voidSetPinValue+0x1d0>
     bce:	50 c0       	rjmp	.+160    	; 0xc70 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
     bd0:	ab e3       	ldi	r26, 0x3B	; 59
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	eb e3       	ldi	r30, 0x3B	; 59
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 2e       	mov	r0, r18
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_voidSetPinValue+0x176>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_voidSetPinValue+0x172>
     bf2:	84 2b       	or	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	3d c0       	rjmp	.+122    	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
     bf8:	a8 e3       	ldi	r26, 0x38	; 56
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e8 e3       	ldi	r30, 0x38	; 56
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_voidSetPinValue+0x19e>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <DIO_voidSetPinValue+0x19a>
     c1a:	84 2b       	or	r24, r20
     c1c:	8c 93       	st	X, r24
     c1e:	29 c0       	rjmp	.+82     	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
     c20:	a5 e3       	ldi	r26, 0x35	; 53
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e5 e3       	ldi	r30, 0x35	; 53
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 2e       	mov	r0, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_voidSetPinValue+0x1c6>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_voidSetPinValue+0x1c2>
     c42:	84 2b       	or	r24, r20
     c44:	8c 93       	st	X, r24
     c46:	15 c0       	rjmp	.+42     	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
     c48:	a2 e3       	ldi	r26, 0x32	; 50
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e2 e3       	ldi	r30, 0x32	; 50
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	48 2f       	mov	r20, r24
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 2e       	mov	r0, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <DIO_voidSetPinValue+0x1ee>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <DIO_voidSetPinValue+0x1ea>
     c6a:	84 2b       	or	r24, r20
     c6c:	8c 93       	st	X, r24
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
     c70:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
     c74:	28 96       	adiw	r28, 0x08	; 8
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	28 97       	sbiw	r28, 0x08	; 8
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	8a 83       	std	Y+2, r24	; 0x02
     c9c:	6b 83       	std	Y+3, r22	; 0x03
     c9e:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	88 23       	and	r24, r24
     ca8:	09 f0       	breq	.+2      	; 0xcac <DIO_voidSetPinDirection+0x26>
     caa:	76 c0       	rjmp	.+236    	; 0xd98 <DIO_voidSetPinDirection+0x112>
    {
        switch (EN_port)
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	38 87       	std	Y+8, r19	; 0x08
     cb4:	2f 83       	std	Y+7, r18	; 0x07
     cb6:	8f 81       	ldd	r24, Y+7	; 0x07
     cb8:	98 85       	ldd	r25, Y+8	; 0x08
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	91 05       	cpc	r25, r1
     cbe:	59 f1       	breq	.+86     	; 0xd16 <DIO_voidSetPinDirection+0x90>
     cc0:	2f 81       	ldd	r18, Y+7	; 0x07
     cc2:	38 85       	ldd	r19, Y+8	; 0x08
     cc4:	22 30       	cpi	r18, 0x02	; 2
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f4       	brge	.+10     	; 0xcd4 <DIO_voidSetPinDirection+0x4e>
     cca:	8f 81       	ldd	r24, Y+7	; 0x07
     ccc:	98 85       	ldd	r25, Y+8	; 0x08
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	69 f0       	breq	.+26     	; 0xcec <DIO_voidSetPinDirection+0x66>
     cd2:	60 c0       	rjmp	.+192    	; 0xd94 <DIO_voidSetPinDirection+0x10e>
     cd4:	2f 81       	ldd	r18, Y+7	; 0x07
     cd6:	38 85       	ldd	r19, Y+8	; 0x08
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	89 f1       	breq	.+98     	; 0xd40 <DIO_voidSetPinDirection+0xba>
     cde:	8f 81       	ldd	r24, Y+7	; 0x07
     ce0:	98 85       	ldd	r25, Y+8	; 0x08
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	91 05       	cpc	r25, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <DIO_voidSetPinDirection+0x64>
     ce8:	40 c0       	rjmp	.+128    	; 0xd6a <DIO_voidSetPinDirection+0xe4>
     cea:	54 c0       	rjmp	.+168    	; 0xd94 <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
     cec:	aa e3       	ldi	r26, 0x3A	; 58
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e3       	ldi	r30, 0x3A	; 58
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_voidSetPinDirection+0x84>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_voidSetPinDirection+0x80>
     d0e:	80 95       	com	r24
     d10:	84 23       	and	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	b5 c0       	rjmp	.+362    	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
     d16:	a7 e3       	ldi	r26, 0x37	; 55
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e3       	ldi	r30, 0x37	; 55
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_voidSetPinDirection+0xae>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_voidSetPinDirection+0xaa>
     d38:	80 95       	com	r24
     d3a:	84 23       	and	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	a0 c0       	rjmp	.+320    	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
     d40:	a4 e3       	ldi	r26, 0x34	; 52
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e4 e3       	ldi	r30, 0x34	; 52
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_voidSetPinDirection+0xd8>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_voidSetPinDirection+0xd4>
     d62:	80 95       	com	r24
     d64:	84 23       	and	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	8b c0       	rjmp	.+278    	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
     d6a:	a1 e3       	ldi	r26, 0x31	; 49
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e1 e3       	ldi	r30, 0x31	; 49
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_voidSetPinDirection+0x102>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_voidSetPinDirection+0xfe>
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	76 c0       	rjmp	.+236    	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
     d94:	19 82       	std	Y+1, r1	; 0x01
     d96:	74 c0       	rjmp	.+232    	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	09 f0       	breq	.+2      	; 0xda0 <DIO_voidSetPinDirection+0x11a>
     d9e:	70 c0       	rjmp	.+224    	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
    {
        switch (EN_port)
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	3e 83       	std	Y+6, r19	; 0x06
     da8:	2d 83       	std	Y+5, r18	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	91 05       	cpc	r25, r1
     db2:	49 f1       	breq	.+82     	; 0xe06 <DIO_voidSetPinDirection+0x180>
     db4:	2d 81       	ldd	r18, Y+5	; 0x05
     db6:	3e 81       	ldd	r19, Y+6	; 0x06
     db8:	22 30       	cpi	r18, 0x02	; 2
     dba:	31 05       	cpc	r19, r1
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <DIO_voidSetPinDirection+0x142>
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	61 f0       	breq	.+24     	; 0xdde <DIO_voidSetPinDirection+0x158>
     dc6:	5b c0       	rjmp	.+182    	; 0xe7e <DIO_voidSetPinDirection+0x1f8>
     dc8:	2d 81       	ldd	r18, Y+5	; 0x05
     dca:	3e 81       	ldd	r19, Y+6	; 0x06
     dcc:	22 30       	cpi	r18, 0x02	; 2
     dce:	31 05       	cpc	r19, r1
     dd0:	71 f1       	breq	.+92     	; 0xe2e <DIO_voidSetPinDirection+0x1a8>
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	83 30       	cpi	r24, 0x03	; 3
     dd8:	91 05       	cpc	r25, r1
     dda:	e9 f1       	breq	.+122    	; 0xe56 <DIO_voidSetPinDirection+0x1d0>
     ddc:	50 c0       	rjmp	.+160    	; 0xe7e <DIO_voidSetPinDirection+0x1f8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
     dde:	aa e3       	ldi	r26, 0x3A	; 58
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ea e3       	ldi	r30, 0x3A	; 58
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_voidSetPinDirection+0x176>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_voidSetPinDirection+0x172>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	3d c0       	rjmp	.+122    	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
     e06:	a7 e3       	ldi	r26, 0x37	; 55
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e3       	ldi	r30, 0x37	; 55
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_voidSetPinDirection+0x19e>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_voidSetPinDirection+0x19a>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	29 c0       	rjmp	.+82     	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
     e2e:	a4 e3       	ldi	r26, 0x34	; 52
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e4 e3       	ldi	r30, 0x34	; 52
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_voidSetPinDirection+0x1c6>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_voidSetPinDirection+0x1c2>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	15 c0       	rjmp	.+42     	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
     e56:	a1 e3       	ldi	r26, 0x31	; 49
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_voidSetPinDirection+0x1ee>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_voidSetPinDirection+0x1ea>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
     e7e:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
     e82:	28 96       	adiw	r28, 0x08	; 8
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_u8GetPinValue+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_u8GetPinValue+0x8>
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3d 83       	std	Y+5, r19	; 0x05
     eae:	2c 83       	std	Y+4, r18	; 0x04
     eb0:	4c 81       	ldd	r20, Y+4	; 0x04
     eb2:	5d 81       	ldd	r21, Y+5	; 0x05
     eb4:	41 30       	cpi	r20, 0x01	; 1
     eb6:	51 05       	cpc	r21, r1
     eb8:	41 f1       	breq	.+80     	; 0xf0a <DIO_u8GetPinValue+0x76>
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	91 05       	cpc	r25, r1
     ec2:	34 f4       	brge	.+12     	; 0xed0 <DIO_u8GetPinValue+0x3c>
     ec4:	2c 81       	ldd	r18, Y+4	; 0x04
     ec6:	3d 81       	ldd	r19, Y+5	; 0x05
     ec8:	21 15       	cp	r18, r1
     eca:	31 05       	cpc	r19, r1
     ecc:	61 f0       	breq	.+24     	; 0xee6 <DIO_u8GetPinValue+0x52>
     ece:	52 c0       	rjmp	.+164    	; 0xf74 <DIO_u8GetPinValue+0xe0>
     ed0:	4c 81       	ldd	r20, Y+4	; 0x04
     ed2:	5d 81       	ldd	r21, Y+5	; 0x05
     ed4:	42 30       	cpi	r20, 0x02	; 2
     ed6:	51 05       	cpc	r21, r1
     ed8:	51 f1       	breq	.+84     	; 0xf2e <DIO_u8GetPinValue+0x9a>
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	b9 f1       	breq	.+110    	; 0xf52 <DIO_u8GetPinValue+0xbe>
     ee4:	47 c0       	rjmp	.+142    	; 0xf74 <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
     ee6:	e9 e3       	ldi	r30, 0x39	; 57
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a9 01       	movw	r20, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_u8GetPinValue+0x6a>
     efa:	55 95       	asr	r21
     efc:	47 95       	ror	r20
     efe:	8a 95       	dec	r24
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_u8GetPinValue+0x66>
     f02:	ca 01       	movw	r24, r20
     f04:	81 70       	andi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	35 c0       	rjmp	.+106    	; 0xf74 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
     f0a:	e6 e3       	ldi	r30, 0x36	; 54
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a9 01       	movw	r20, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_u8GetPinValue+0x8e>
     f1e:	55 95       	asr	r21
     f20:	47 95       	ror	r20
     f22:	8a 95       	dec	r24
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_u8GetPinValue+0x8a>
     f26:	ca 01       	movw	r24, r20
     f28:	81 70       	andi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	23 c0       	rjmp	.+70     	; 0xf74 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
     f2e:	e3 e3       	ldi	r30, 0x33	; 51
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a9 01       	movw	r20, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8GetPinValue+0xb2>
     f42:	55 95       	asr	r21
     f44:	47 95       	ror	r20
     f46:	8a 95       	dec	r24
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8GetPinValue+0xae>
     f4a:	ca 01       	movw	r24, r20
     f4c:	81 70       	andi	r24, 0x01	; 1
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	11 c0       	rjmp	.+34     	; 0xf74 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
     f52:	e0 e3       	ldi	r30, 0x30	; 48
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_u8GetPinValue+0xd6>
     f66:	55 95       	asr	r21
     f68:	47 95       	ror	r20
     f6a:	8a 95       	dec	r24
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_u8GetPinValue+0xd2>
     f6e:	ca 01       	movw	r24, r20
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <DIO_voidTogPin+0x6>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <DIO_voidTogPin+0x8>
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	8a 83       	std	Y+2, r24	; 0x02
     f96:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 83       	std	Y+5, r19	; 0x05
     fa4:	2c 83       	std	Y+4, r18	; 0x04
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	49 f1       	breq	.+82     	; 0x1002 <DIO_voidTogPin+0x7c>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <DIO_voidTogPin+0x3e>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	61 f0       	breq	.+24     	; 0xfda <DIO_voidTogPin+0x54>
     fc2:	5b c0       	rjmp	.+182    	; 0x107a <DIO_voidTogPin+0xf4>
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	71 f1       	breq	.+92     	; 0x102a <DIO_voidTogPin+0xa4>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	91 05       	cpc	r25, r1
     fd6:	e9 f1       	breq	.+122    	; 0x1052 <DIO_voidTogPin+0xcc>
     fd8:	50 c0       	rjmp	.+160    	; 0x107a <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_voidTogPin+0x72>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_voidTogPin+0x6e>
     ffc:	84 27       	eor	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	3d c0       	rjmp	.+122    	; 0x107c <DIO_voidTogPin+0xf6>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
    1002:	a8 e3       	ldi	r26, 0x38	; 56
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e8 e3       	ldi	r30, 0x38	; 56
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_voidTogPin+0x9a>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_voidTogPin+0x96>
    1024:	84 27       	eor	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	29 c0       	rjmp	.+82     	; 0x107c <DIO_voidTogPin+0xf6>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
    102a:	a5 e3       	ldi	r26, 0x35	; 53
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_voidTogPin+0xc2>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_voidTogPin+0xbe>
    104c:	84 27       	eor	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	15 c0       	rjmp	.+42     	; 0x107c <DIO_voidTogPin+0xf6>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
    1052:	a2 e3       	ldi	r26, 0x32	; 50
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e2 e3       	ldi	r30, 0x32	; 50
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_voidTogPin+0xea>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_voidTogPin+0xe6>
    1074:	84 27       	eor	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	01 c0       	rjmp	.+2      	; 0x107c <DIO_voidTogPin+0xf6>
        break;
    default:
        state = E_ERROR;
    107a:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return state;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <DIO_voidSetPortValue+0x6>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <DIO_voidSetPortValue+0x8>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8a 83       	std	Y+2, r24	; 0x02
    109e:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3d 83       	std	Y+5, r19	; 0x05
    10ac:	2c 83       	std	Y+4, r18	; 0x04
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	d1 f0       	breq	.+52     	; 0x10ec <DIO_voidSetPortValue+0x5e>
    10b8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ba:	3d 81       	ldd	r19, Y+5	; 0x05
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <DIO_voidSetPortValue+0x3e>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <DIO_voidSetPortValue+0x54>
    10ca:	1f c0       	rjmp	.+62     	; 0x110a <DIO_voidSetPortValue+0x7c>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	81 f0       	breq	.+32     	; 0x10f6 <DIO_voidSetPortValue+0x68>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	81 f0       	breq	.+32     	; 0x1100 <DIO_voidSetPortValue+0x72>
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
    10e2:	eb e3       	ldi	r30, 0x3B	; 59
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	80 83       	st	Z, r24
    10ea:	10 c0       	rjmp	.+32     	; 0x110c <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_B:
        PORTB = EN_Value;
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	80 83       	st	Z, r24
    10f4:	0b c0       	rjmp	.+22     	; 0x110c <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_C:
        PORTC = EN_Value;
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	80 83       	st	Z, r24
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_D:
        PORTD = EN_Value;
    1100:	e2 e3       	ldi	r30, 0x32	; 50
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	80 83       	st	Z, r24
    1108:	01 c0       	rjmp	.+2      	; 0x110c <DIO_voidSetPortValue+0x7e>
        break;
    default:
        state = E_ERROR;
    110a:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <DIO_voidSetPortDirection+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_voidSetPortDirection+0x8>
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	8a 83       	std	Y+2, r24	; 0x02
    112e:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	d1 f0       	breq	.+52     	; 0x117c <DIO_voidSetPortDirection+0x5e>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <DIO_voidSetPortDirection+0x3e>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	61 f0       	breq	.+24     	; 0x1172 <DIO_voidSetPortDirection+0x54>
    115a:	1f c0       	rjmp	.+62     	; 0x119a <DIO_voidSetPortDirection+0x7c>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	81 f0       	breq	.+32     	; 0x1186 <DIO_voidSetPortDirection+0x68>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <DIO_voidSetPortDirection+0x72>
    1170:	14 c0       	rjmp	.+40     	; 0x119a <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
    1172:	ea e3       	ldi	r30, 0x3A	; 58
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	80 83       	st	Z, r24
    117a:	10 c0       	rjmp	.+32     	; 0x119c <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_B:
        DDRB = EN_Direction;
    117c:	e7 e3       	ldi	r30, 0x37	; 55
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	80 83       	st	Z, r24
    1184:	0b c0       	rjmp	.+22     	; 0x119c <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_C:
        DDRC = EN_Direction;
    1186:	e4 e3       	ldi	r30, 0x34	; 52
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	80 83       	st	Z, r24
    118e:	06 c0       	rjmp	.+12     	; 0x119c <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_D:
        DDRD = EN_Direction;
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	80 83       	st	Z, r24
    1198:	01 c0       	rjmp	.+2      	; 0x119c <DIO_voidSetPortDirection+0x7e>
        break;
    default:
        state = E_ERROR;
    119a:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    119c:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_voidInpullUp+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_voidInpullUp+0x8>
    11b6:	0f 92       	push	r0
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3d 83       	std	Y+5, r19	; 0x05
    11cc:	2c 83       	std	Y+4, r18	; 0x04
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <DIO_voidInpullUp+0x2c>
    11d8:	3e c0       	rjmp	.+124    	; 0x1256 <DIO_voidInpullUp+0xa8>
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_voidInpullUp+0x40>
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	71 f0       	breq	.+28     	; 0x1208 <DIO_voidInpullUp+0x5a>
    11ec:	a9 c0       	rjmp	.+338    	; 0x1340 <DIO_voidInpullUp+0x192>
    11ee:	2c 81       	ldd	r18, Y+4	; 0x04
    11f0:	3d 81       	ldd	r19, Y+5	; 0x05
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <DIO_voidInpullUp+0x4c>
    11f8:	55 c0       	rjmp	.+170    	; 0x12a4 <DIO_voidInpullUp+0xf6>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <DIO_voidInpullUp+0x58>
    1204:	76 c0       	rjmp	.+236    	; 0x12f2 <DIO_voidInpullUp+0x144>
    1206:	9c c0       	rjmp	.+312    	; 0x1340 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
    1208:	aa e3       	ldi	r26, 0x3A	; 58
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ea e3       	ldi	r30, 0x3A	; 58
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_voidInpullUp+0x76>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	2a 95       	dec	r18
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_voidInpullUp+0x72>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
    122e:	ab e3       	ldi	r26, 0x3B	; 59
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e3       	ldi	r30, 0x3B	; 59
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_voidInpullUp+0x9e>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_voidInpullUp+0x9a>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	76 c0       	rjmp	.+236    	; 0x1342 <DIO_voidInpullUp+0x194>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
    1256:	a7 e3       	ldi	r26, 0x37	; 55
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_voidInpullUp+0xc4>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	2a 95       	dec	r18
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_voidInpullUp+0xc0>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
    127c:	a8 e3       	ldi	r26, 0x38	; 56
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e3       	ldi	r30, 0x38	; 56
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_voidInpullUp+0xec>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_voidInpullUp+0xe8>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	4f c0       	rjmp	.+158    	; 0x1342 <DIO_voidInpullUp+0x194>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
    12a4:	a4 e3       	ldi	r26, 0x34	; 52
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e4 e3       	ldi	r30, 0x34	; 52
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_voidInpullUp+0x112>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	2a 95       	dec	r18
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_voidInpullUp+0x10e>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
    12ca:	a5 e3       	ldi	r26, 0x35	; 53
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_voidInpullUp+0x13a>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_voidInpullUp+0x136>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	28 c0       	rjmp	.+80     	; 0x1342 <DIO_voidInpullUp+0x194>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
    12f2:	a1 e3       	ldi	r26, 0x31	; 49
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e1 e3       	ldi	r30, 0x31	; 49
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_voidInpullUp+0x160>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	2a 95       	dec	r18
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_voidInpullUp+0x15c>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
    1318:	a2 e3       	ldi	r26, 0x32	; 50
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_voidInpullUp+0x188>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_voidInpullUp+0x184>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <DIO_voidInpullUp+0x194>
        break;
    default:
        state = E_ERROR;
    1340:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <BCM_init>:

bcm_taskControlBlock_t* pstr_currentTask;
int j=0;
/*channel mode (uart spi -i2c)(send-mode)*/
EN_ERRORSTATE_t BCM_init(gST_init_BCM_cfg_t* bcm_cfg )
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	27 97       	sbiw	r28, 0x07	; 7
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01

	switch(bcm_cfg->channel){
    136c:	e9 81       	ldd	r30, Y+1	; 0x01
    136e:	fa 81       	ldd	r31, Y+2	; 0x02
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3e 83       	std	Y+6, r19	; 0x06
    1378:	2d 83       	std	Y+5, r18	; 0x05
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	09 f1       	breq	.+66     	; 0x13c6 <BCM_init+0x72>
    1384:	2d 81       	ldd	r18, Y+5	; 0x05
    1386:	3e 81       	ldd	r19, Y+6	; 0x06
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	e1 f0       	breq	.+56     	; 0x13c6 <BCM_init+0x72>
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	c1 f4       	brne	.+48     	; 0x13c6 <BCM_init+0x72>

	case BCM_UART_CHANAL:
		UART_ENInit();
    1396:	0e 94 79 01 	call	0x2f2	; 0x2f2 <UART_ENInit>
		switch(bcm_cfg->mode){
    139a:	e9 81       	ldd	r30, Y+1	; 0x01
    139c:	fa 81       	ldd	r31, Y+2	; 0x02
    139e:	81 81       	ldd	r24, Z+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3c 83       	std	Y+4, r19	; 0x04
    13a6:	2b 83       	std	Y+3, r18	; 0x03
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	31 f0       	breq	.+12     	; 0x13bc <BCM_init+0x68>
    13b0:	2b 81       	ldd	r18, Y+3	; 0x03
    13b2:	3c 81       	ldd	r19, Y+4	; 0x04
    13b4:	21 30       	cpi	r18, 0x01	; 1
    13b6:	31 05       	cpc	r19, r1
    13b8:	21 f0       	breq	.+8      	; 0x13c2 <BCM_init+0x6e>
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <BCM_init+0x72>
		case BCM_SENDER:
		//UART_TxInit();
		UART_voidTXInterruptEnable();
    13bc:	0e 94 57 02 	call	0x4ae	; 0x4ae <UART_voidTXInterruptEnable>
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <BCM_init+0x72>
		break;
		case BCM_RECIVER:
		//UART_RxInit();
		UART_voidRXInterruptEnable();
    13c2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <UART_voidRXInterruptEnable>
			break;
	}
		break;

	}
}
    13c6:	27 96       	adiw	r28, 0x07	; 7
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <BCM_setup>:
EN_ERRORSTATE_t BCM_setup(gstr_BCM_Task_cfg_t* str_BCM_TaskCfg)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <BCM_setup+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <BCM_setup+0x8>
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
switch(str_BCM_TaskCfg->channel){
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	84 81       	ldd	r24, Z+4	; 0x04
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	09 f0       	breq	.+2      	; 0x13fa <BCM_setup+0x22>
    13f8:	66 c0       	rjmp	.+204    	; 0x14c6 <BCM_setup+0xee>

	case BCM_UART_CHANAL:
		switch(str_BCM_TaskCfg->mode){
    13fa:	e9 81       	ldd	r30, Y+1	; 0x01
    13fc:	fa 81       	ldd	r31, Y+2	; 0x02
    13fe:	81 85       	ldd	r24, Z+9	; 0x09
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3c 83       	std	Y+4, r19	; 0x04
    1406:	2b 83       	std	Y+3, r18	; 0x03
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	31 f0       	breq	.+12     	; 0x141c <BCM_setup+0x44>
    1410:	2b 81       	ldd	r18, Y+3	; 0x03
    1412:	3c 81       	ldd	r19, Y+4	; 0x04
    1414:	21 30       	cpi	r18, 0x01	; 1
    1416:	31 05       	cpc	r19, r1
    1418:	61 f1       	breq	.+88     	; 0x1472 <BCM_setup+0x9a>
    141a:	55 c0       	rjmp	.+170    	; 0x14c6 <BCM_setup+0xee>
		case BCM_SENDER:
			pstr_currentTask->apu8_BCM_Frame = str_BCM_TaskCfg->buffer;
    141c:	a0 91 d9 00 	lds	r26, 0x00D9
    1420:	b0 91 da 00 	lds	r27, 0x00DA
    1424:	e9 81       	ldd	r30, Y+1	; 0x01
    1426:	fa 81       	ldd	r31, Y+2	; 0x02
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	19 96       	adiw	r26, 0x09	; 9
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	18 97       	sbiw	r26, 0x08	; 8
			pstr_currentTask->u8_byteCounter=  str_BCM_TaskCfg->size;
    1434:	a0 91 d9 00 	lds	r26, 0x00D9
    1438:	b0 91 da 00 	lds	r27, 0x00DA
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	fa 81       	ldd	r31, Y+2	; 0x02
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
    1444:	14 96       	adiw	r26, 0x04	; 4
    1446:	8c 93       	st	X, r24
			pstr_currentTask->bcmTask->bcm_cbf=		   str_BCM_TaskCfg->bcm_cbf;
    1448:	e0 91 d9 00 	lds	r30, 0x00D9
    144c:	f0 91 da 00 	lds	r31, 0x00DA
    1450:	a0 81       	ld	r26, Z
    1452:	b1 81       	ldd	r27, Z+1	; 0x01
    1454:	e9 81       	ldd	r30, Y+1	; 0x01
    1456:	fa 81       	ldd	r31, Y+2	; 0x02
    1458:	85 81       	ldd	r24, Z+5	; 0x05
    145a:	96 81       	ldd	r25, Z+6	; 0x06
    145c:	16 96       	adiw	r26, 0x06	; 6
    145e:	9c 93       	st	X, r25
    1460:	8e 93       	st	-X, r24
    1462:	15 97       	sbiw	r26, 0x05	; 5
			pstr_currentTask->u8_taskStatus=BCM_START;
    1464:	e0 91 d9 00 	lds	r30, 0x00D9
    1468:	f0 91 da 00 	lds	r31, 0x00DA
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	82 83       	std	Z+2, r24	; 0x02
    1470:	2a c0       	rjmp	.+84     	; 0x14c6 <BCM_setup+0xee>

			break;
		case BCM_RECIVER:
			pstr_currentTask->apu8_BCM_Frame= str_BCM_TaskCfg->buffer;
    1472:	a0 91 d9 00 	lds	r26, 0x00D9
    1476:	b0 91 da 00 	lds	r27, 0x00DA
    147a:	e9 81       	ldd	r30, Y+1	; 0x01
    147c:	fa 81       	ldd	r31, Y+2	; 0x02
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	19 96       	adiw	r26, 0x09	; 9
    1484:	9c 93       	st	X, r25
    1486:	8e 93       	st	-X, r24
    1488:	18 97       	sbiw	r26, 0x08	; 8
			pstr_currentTask->u8_byteCounter=  str_BCM_TaskCfg->size;
    148a:	a0 91 d9 00 	lds	r26, 0x00D9
    148e:	b0 91 da 00 	lds	r27, 0x00DA
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	14 96       	adiw	r26, 0x04	; 4
    149c:	8c 93       	st	X, r24
			pstr_currentTask->bcmTask->bcm_cbf=		   str_BCM_TaskCfg->bcm_cbf;
    149e:	e0 91 d9 00 	lds	r30, 0x00D9
    14a2:	f0 91 da 00 	lds	r31, 0x00DA
    14a6:	a0 81       	ld	r26, Z
    14a8:	b1 81       	ldd	r27, Z+1	; 0x01
    14aa:	e9 81       	ldd	r30, Y+1	; 0x01
    14ac:	fa 81       	ldd	r31, Y+2	; 0x02
    14ae:	85 81       	ldd	r24, Z+5	; 0x05
    14b0:	96 81       	ldd	r25, Z+6	; 0x06
    14b2:	16 96       	adiw	r26, 0x06	; 6
    14b4:	9c 93       	st	X, r25
    14b6:	8e 93       	st	-X, r24
    14b8:	15 97       	sbiw	r26, 0x05	; 5
			pstr_currentTask->u8_taskStatus=BCM_START;
    14ba:	e0 91 d9 00 	lds	r30, 0x00D9
    14be:	f0 91 da 00 	lds	r31, 0x00DA
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	82 83       	std	Z+2, r24	; 0x02
		break;

	}


}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <BCM_RX_dispatcher>:

EN_ERRORSTATE_t BCM_RX_dispatcher(){
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62

	if ((pstr_currentTask->u8_taskStatus==BCM_START)){
    14e4:	e0 91 d9 00 	lds	r30, 0x00D9
    14e8:	f0 91 da 00 	lds	r31, 0x00DA
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	01 f5       	brne	.+64     	; 0x1532 <BCM_RX_dispatcher+0x5c>
		pstr_currentTask->apu8_BCM_Frame[j]=UART_u8ReceiveNoBlock();
    14f2:	e0 91 d9 00 	lds	r30, 0x00D9
    14f6:	f0 91 da 00 	lds	r31, 0x00DA
    14fa:	20 85       	ldd	r18, Z+8	; 0x08
    14fc:	31 85       	ldd	r19, Z+9	; 0x09
    14fe:	80 91 d7 00 	lds	r24, 0x00D7
    1502:	90 91 d8 00 	lds	r25, 0x00D8
    1506:	89 01       	movw	r16, r18
    1508:	08 0f       	add	r16, r24
    150a:	19 1f       	adc	r17, r25
    150c:	0e 94 4a 02 	call	0x494	; 0x494 <UART_u8ReceiveNoBlock>
    1510:	f8 01       	movw	r30, r16
    1512:	80 83       	st	Z, r24
	pstr_currentTask->u8_taskStatus=BCM_SENDING;
    1514:	e0 91 d9 00 	lds	r30, 0x00D9
    1518:	f0 91 da 00 	lds	r31, 0x00DA
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	82 83       	std	Z+2, r24	; 0x02
	//in isr 		pstr_currentTask->u8_taskStatus==BCM_START;
	j++;
    1520:	80 91 d7 00 	lds	r24, 0x00D7
    1524:	90 91 d8 00 	lds	r25, 0x00D8
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	90 93 d8 00 	sts	0x00D8, r25
    152e:	80 93 d7 00 	sts	0x00D7, r24
	}


}
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <BCM_TX_dispatcher>:

EN_ERRORSTATE_t BCM_TX_dispatcher(){
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	//static int i=0;
		if ((pstr_currentTask->u8_taskStatus==BCM_START)&&(j<pstr_currentTask->u8_byteCounter)){
    1548:	e0 91 d9 00 	lds	r30, 0x00D9
    154c:	f0 91 da 00 	lds	r31, 0x00DA
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	69 f5       	brne	.+90     	; 0x15b0 <BCM_TX_dispatcher+0x72>
    1556:	e0 91 d9 00 	lds	r30, 0x00D9
    155a:	f0 91 da 00 	lds	r31, 0x00DA
    155e:	84 81       	ldd	r24, Z+4	; 0x04
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	80 91 d7 00 	lds	r24, 0x00D7
    1568:	90 91 d8 00 	lds	r25, 0x00D8
    156c:	82 17       	cp	r24, r18
    156e:	93 07       	cpc	r25, r19
    1570:	fc f4       	brge	.+62     	; 0x15b0 <BCM_TX_dispatcher+0x72>
			UART_ENSendNoBlock(pstr_currentTask->apu8_BCM_Frame[j]);
    1572:	e0 91 d9 00 	lds	r30, 0x00D9
    1576:	f0 91 da 00 	lds	r31, 0x00DA
    157a:	20 85       	ldd	r18, Z+8	; 0x08
    157c:	31 85       	ldd	r19, Z+9	; 0x09
    157e:	80 91 d7 00 	lds	r24, 0x00D7
    1582:	90 91 d8 00 	lds	r25, 0x00D8
    1586:	f9 01       	movw	r30, r18
    1588:	e8 0f       	add	r30, r24
    158a:	f9 1f       	adc	r31, r25
    158c:	80 81       	ld	r24, Z
    158e:	0e 94 02 02 	call	0x404	; 0x404 <UART_ENSendNoBlock>
		pstr_currentTask->u8_taskStatus=BCM_SENDING;
    1592:	e0 91 d9 00 	lds	r30, 0x00D9
    1596:	f0 91 da 00 	lds	r31, 0x00DA
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	82 83       	std	Z+2, r24	; 0x02
		//in isr 		pstr_currentTask->u8_taskStatus==BCM_START;
		j++;
    159e:	80 91 d7 00 	lds	r24, 0x00D7
    15a2:	90 91 d8 00 	lds	r25, 0x00D8
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	90 93 d8 00 	sts	0x00D8, r25
    15ac:	80 93 d7 00 	sts	0x00D7, r24
//		DIO_voidSetPinValue(PORT_B,PIN1,HIGH);
//		//pstr_currentTask->bcmTask->bcm_cbf();
//		pstr_currentTask->u8_taskStatus=BCM_IDLE;
//		//j=0;
//	}
}
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <BCM_TX_Handller>:
EN_ERRORSTATE_t BCM_TX_Handller(){
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62

	if (j<pstr_currentTask->u8_byteCounter){
    15c2:	e0 91 d9 00 	lds	r30, 0x00D9
    15c6:	f0 91 da 00 	lds	r31, 0x00DA
    15ca:	84 81       	ldd	r24, Z+4	; 0x04
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	80 91 d7 00 	lds	r24, 0x00D7
    15d4:	90 91 d8 00 	lds	r25, 0x00D8
    15d8:	82 17       	cp	r24, r18
    15da:	93 07       	cpc	r25, r19
    15dc:	34 f4       	brge	.+12     	; 0x15ea <BCM_TX_Handller+0x32>
			pstr_currentTask->u8_taskStatus=BCM_START;
    15de:	e0 91 d9 00 	lds	r30, 0x00D9
    15e2:	f0 91 da 00 	lds	r31, 0x00DA
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	82 83       	std	Z+2, r24	; 0x02
	}
	//DIO_voidSetPinValue(PORT_B,PIN1,LOW);
	if (j>=pstr_currentTask->u8_byteCounter){
    15ea:	e0 91 d9 00 	lds	r30, 0x00D9
    15ee:	f0 91 da 00 	lds	r31, 0x00DA
    15f2:	84 81       	ldd	r24, Z+4	; 0x04
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	80 91 d7 00 	lds	r24, 0x00D7
    15fc:	90 91 d8 00 	lds	r25, 0x00D8
    1600:	82 17       	cp	r24, r18
    1602:	93 07       	cpc	r25, r19
    1604:	2c f0       	brlt	.+10     	; 0x1610 <BCM_TX_Handller+0x58>
		//pstr_currentTask->bcmTask->bcm_cbf();
		pstr_currentTask->u8_taskStatus=BCM_IDLE;
    1606:	e0 91 d9 00 	lds	r30, 0x00D9
    160a:	f0 91 da 00 	lds	r31, 0x00DA
    160e:	12 82       	std	Z+2, r1	; 0x02
		//j=0;
	}

}
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <BCM_RX_Handller>:
EN_ERRORSTATE_t BCM_RX_Handller(){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62



	pstr_currentTask->u8_taskStatus=BCM_START;
    1622:	e0 91 d9 00 	lds	r30, 0x00D9
    1626:	f0 91 da 00 	lds	r31, 0x00DA
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	82 83       	std	Z+2, r24	; 0x02
	//DIO_voidSetPinValue(PORT_B,PIN1,LOW);
	if (j>=pstr_currentTask->u8_byteCounter){
    162e:	e0 91 d9 00 	lds	r30, 0x00D9
    1632:	f0 91 da 00 	lds	r31, 0x00DA
    1636:	84 81       	ldd	r24, Z+4	; 0x04
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	80 91 d7 00 	lds	r24, 0x00D7
    1640:	90 91 d8 00 	lds	r25, 0x00D8
    1644:	82 17       	cp	r24, r18
    1646:	93 07       	cpc	r25, r19
    1648:	54 f0       	brlt	.+20     	; 0x165e <BCM_RX_Handller+0x46>
		DIO_voidSetPinValue(PORT_A,PIN0,HIGH);
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	0e 94 3c 05 	call	0xa78	; 0xa78 <DIO_voidSetPinValue>

		//pstr_currentTask->bcmTask->bcm_cbf();
		pstr_currentTask->u8_taskStatus=BCM_IDLE;
    1654:	e0 91 d9 00 	lds	r30, 0x00D9
    1658:	f0 91 da 00 	lds	r31, 0x00DA
    165c:	12 82       	std	Z+2, r1	; 0x02
		//j=0;
	}



}
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <led>:


#include "BCM.h"
#include "BCM_cfg.h"
#include "DIO_Interface.h"
void led(void){
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62

DIO_voidSetPinValue(PORT_A,PIN0,HIGH);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 3c 05 	call	0xa78	; 0xa78 <DIO_voidSetPinValue>
}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <main>:
char arr[1000];
int main(){
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	62 97       	sbiw	r28, 0x12	; 18
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(PORT_A,PIN0,OUTPUT);
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 43 06 	call	0xc86	; 0xc86 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_D,PIN1,OUTPUT);
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 43 06 	call	0xc86	; 0xc86 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_D,PIN0,INPUT);
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	0e 94 43 06 	call	0xc86	; 0xc86 <DIO_voidSetPinDirection>

	gST_init_BCM_cfg_t data_init={BCM_UART_CHANAL,BCM_RECIVER};
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	8a 83       	std	Y+2, r24	; 0x02

	BCM_init(&data_init);
    16b6:	ce 01       	movw	r24, r28
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	0e 94 aa 09 	call	0x1354	; 0x1354 <BCM_init>


	gstr_BCM_Task_cfg_t data_setup={arr,6,	BCM_UART_CHANAL,led,5,BCM_RECIVER,1};
    16be:	ce 01       	movw	r24, r28
    16c0:	03 96       	adiw	r24, 0x03	; 3
    16c2:	9f 87       	std	Y+15, r25	; 0x0f
    16c4:	8e 87       	std	Y+14, r24	; 0x0e
    16c6:	e1 e6       	ldi	r30, 0x61	; 97
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	f9 8b       	std	Y+17, r31	; 0x11
    16cc:	e8 8b       	std	Y+16, r30	; 0x10
    16ce:	fb e0       	ldi	r31, 0x0B	; 11
    16d0:	fa 8b       	std	Y+18, r31	; 0x12
    16d2:	e8 89       	ldd	r30, Y+16	; 0x10
    16d4:	f9 89       	ldd	r31, Y+17	; 0x11
    16d6:	00 80       	ld	r0, Z
    16d8:	88 89       	ldd	r24, Y+16	; 0x10
    16da:	99 89       	ldd	r25, Y+17	; 0x11
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	99 8b       	std	Y+17, r25	; 0x11
    16e0:	88 8b       	std	Y+16, r24	; 0x10
    16e2:	ee 85       	ldd	r30, Y+14	; 0x0e
    16e4:	ff 85       	ldd	r31, Y+15	; 0x0f
    16e6:	00 82       	st	Z, r0
    16e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	9f 87       	std	Y+15, r25	; 0x0f
    16f0:	8e 87       	std	Y+14, r24	; 0x0e
    16f2:	9a 89       	ldd	r25, Y+18	; 0x12
    16f4:	91 50       	subi	r25, 0x01	; 1
    16f6:	9a 8b       	std	Y+18, r25	; 0x12
    16f8:	ea 89       	ldd	r30, Y+18	; 0x12
    16fa:	ee 23       	and	r30, r30
    16fc:	51 f7       	brne	.-44     	; 0x16d2 <main+0x54>

	BCM_setup(&data_setup);
    16fe:	ce 01       	movw	r24, r28
    1700:	03 96       	adiw	r24, 0x03	; 3
    1702:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <BCM_setup>



	while (1){
		BCM_RX_dispatcher();
    1706:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <BCM_RX_dispatcher>
    170a:	fd cf       	rjmp	.-6      	; 0x1706 <main+0x88>

0000170c <_exit>:
    170c:	f8 94       	cli

0000170e <__stop_program>:
    170e:	ff cf       	rjmp	.-2      	; 0x170e <__stop_program>
